/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 02.11.2023 15:49:52

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242624;
#else
constexpr int kTensorArenaSize = 241600;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 40520, -40609, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00010682690481189638, 0.00010734749230323359, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 69,-47,-57,111,-91,4,-61,73,127,-47,-47,-28,-21,80,-62,31,118,-100,-55,-117,105,80,76,-75,-79,-101,-56,82,10,-105,-24,68, 
  /* [1][0][][] */ 64,86,84,-72,-84,86,-10,16,-43,-14,42,120,127,49,43,0,-46,3,-75,-101,-88,41,40,125,96,81,-54,-6,115,-118,-119,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.003128106240183115, 0.0031433501280844212, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 129, 236, 254, -284, -338, 246, -298, 165, -298, -348, 211, 212, 221, 199, 150, -441, -322, 629, 207, -390, -277, 146, 165, 239, 176, -16, -262, -310, -350, -292, -279, -367, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.4106851419201121e-05, 4.2238767491653562e-05, 4.1593964851927012e-05, 4.183006240054965e-05, 4.1963467083405703e-05, 3.9900245610624552e-05, 4.1785573557717726e-05, 4.1250306821893901e-05, 4.2020688852062449e-05, 4.2870939068961889e-05, 4.1019346099346876e-05, 3.9774145989213139e-05, 4.1697410779306665e-05, 4.1728137148311362e-05, 4.1549839806975797e-05, 4.3439747969387099e-05, 3.9773567550582811e-05, 4.5012046030024067e-05, 4.6272012696135789e-05, 4.0784110751701519e-05, 4.1322145989397541e-05, 4.1253846575273201e-05, 4.3114636355312541e-05, 4.1722654714249074e-05, 4.2296931496821344e-05, 4.1832980059552938e-05, 4.2823543481063098e-05, 4.0496310248272493e-05, 4.1266182961408049e-05, 4.0751969208940864e-05, 4.1675597458379343e-05, 4.256784450262785e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -35,-47,103,10,89,-12,-84,-103,63,-89,-105,2,54,10,-35,56,-53,-27,-63,-55,-68,-100,6,107,-108,10,78,-46,105,-2,-18,-80,88,-59,-91,61,-105,-77,-93,27,75,-81,-95,99,52,-104,107,-19,21,-56,-38,96,-69,-48,-93,106,29,67,127,-105,-77,80,-53,50,-28,17,70,89,52,95,88,-114,102,-95,30,85,-103,15,-58,35,54,21,87,-3,-56,-40,-82,103,28,116,-12,-122,12,69,27,19, 
  /* [1][0][][] */ -53,40,-68,2,-34,85,43,10,90,-97,-102,114,71,-21,30,73,115,-34,42,127,-45,-1,42,32,43,24,-36,114,13,9,107,-62,69,112,-7,33,58,68,-11,-64,-58,12,-17,-95,-29,43,-25,-51,-18,-81,111,66,17,91,-76,-44,34,107,72,90,-55,122,-65,-73,-60,42,83,43,114,35,24,14,-112,103,-53,53,90,-42,-37,83,-76,92,-55,-113,35,123,-65,-61,84,88,97,25,92,99,31,3, 
  /* [2][0][][] */ 53,44,-58,102,-18,-59,96,100,-95,96,-32,126,102,-9,91,-108,-55,-20,40,63,-95,-10,120,26,-19,89,114,14,-69,86,88,102,-63,-15,-93,-107,-84,104,113,-25,-115,-73,20,-2,-80,127,-20,-76,109,45,97,-86,-42,71,27,26,-66,103,-52,9,-12,66,-34,80,92,54,55,92,-90,76,15,-70,40,-68,30,34,-50,-21,10,19,45,-92,-10,-37,7,-97,-14,-26,97,122,-24,6,-39,-80,-45,-62, 
  /* [3][0][][] */ 71,-4,36,-26,-73,52,-120,41,48,18,63,1,102,96,71,1,103,96,-58,11,118,-94,-71,-122,-30,-120,-88,107,44,-103,85,3,-63,-41,-17,-19,-99,-30,46,46,-31,-99,-100,-3,71,26,-54,-90,65,-86,46,-6,96,25,90,-106,-124,-126,-96,-66,-100,34,-42,71,57,-39,-67,-36,-38,-73,5,104,20,-114,56,-54,30,97,95,-69,-97,-126,44,91,25,42,-49,-127,-86,41,-1,-110,92,-102,-98,41, 
  /* [4][0][][] */ 47,97,-6,50,-34,7,26,12,56,83,-14,47,25,-44,-18,-73,-32,-12,-68,9,103,-98,81,21,-25,-10,59,-65,-54,31,-75,-60,63,110,14,-111,-57,-14,-120,45,-58,-70,-80,-99,28,101,29,51,16,-48,-22,-85,-96,39,-94,14,31,-103,23,8,1,-83,-46,-75,-53,50,-4,-41,21,-109,-105,-91,-61,14,96,49,56,-29,-14,-65,-1,-52,-105,-27,-6,65,86,-5,-127,-83,43,39,24,96,-106,-23, 
  /* [5][0][][] */ 109,-93,88,94,48,-121,34,62,121,-118,2,-67,32,111,43,45,69,72,-74,111,37,60,23,-25,-105,-62,-12,-95,53,35,23,-103,-34,7,-74,21,-119,-34,53,26,-90,-50,49,108,-30,31,43,-52,-110,117,29,38,47,22,41,-17,120,57,-45,-39,39,-70,42,-71,-37,114,-24,32,87,8,117,-72,-48,91,-36,-73,15,-48,17,97,120,51,29,121,-82,90,-1,46,76,-101,127,94,-13,33,80,-82, 
  /* [6][0][][] */ 15,-51,112,75,-90,-69,-5,64,-19,-89,3,-93,85,53,115,-125,39,-2,-3,100,-83,-125,108,57,-67,-88,-12,-62,-30,-120,44,-83,-96,-127,-46,-112,-13,37,-116,81,85,54,20,-20,-119,104,-95,-49,-89,15,-34,-71,57,-60,93,-32,4,-12,-77,112,-102,-1,66,-77,-55,64,100,-51,76,-10,-112,-9,53,-75,-93,-46,-86,-108,-61,-34,31,-33,43,-31,-77,-91,-45,-101,83,93,98,14,-57,-72,75,-33, 
  /* [7][0][][] */ 126,76,-36,-42,-75,124,-17,1,127,10,-98,19,62,-88,52,82,58,22,2,122,58,40,-2,93,-67,110,47,61,-81,113,-16,40,34,30,69,107,-106,95,-7,-27,103,-76,92,75,58,1,112,-114,61,-58,-114,-68,-22,94,21,36,127,-90,17,-57,10,-5,85,-112,-74,-53,74,25,-109,26,75,91,93,32,60,66,-63,61,-101,54,99,-33,-22,-73,95,38,-111,102,86,10,90,65,-54,-40,-2,-63, 
  /* [8][0][][] */ 6,28,-51,-99,54,26,-84,-24,-2,29,39,88,-8,-53,-94,-82,-76,88,-73,8,24,-32,76,106,-127,87,38,71,-74,12,-100,112,87,-41,45,-8,112,-5,-23,68,75,97,-120,-126,-19,-37,-32,106,13,-104,-70,-11,-73,-17,-38,-120,43,103,-111,100,107,37,40,102,-36,-55,-28,100,-96,45,25,-7,72,61,12,16,-56,102,78,66,28,76,-117,-95,18,37,68,-52,31,-47,-89,97,-91,-111,-56,55, 
  /* [9][0][][] */ -5,0,107,39,75,-113,-56,-125,34,42,-17,47,-31,-87,-110,-34,0,-8,-105,-76,-3,92,-116,-112,106,-17,-19,19,-18,-66,-97,94,54,-7,21,-26,-84,9,-38,-52,40,-76,47,-101,73,13,-113,46,44,-19,-85,-56,67,-83,-77,96,79,-67,-19,-12,-96,98,80,-82,-89,-3,98,40,-48,95,102,-99,-1,74,-110,-103,-86,-127,-47,98,26,19,95,21,-52,-102,29,-24,93,26,-37,103,103,-8,55,-43, 
  /* [10][0][][] */ -60,91,100,-65,-15,104,117,30,48,39,29,-66,114,91,-32,18,-34,91,-101,-58,-16,34,64,-70,39,63,-117,-116,-52,87,-93,-82,98,111,125,80,-39,12,-33,38,-32,127,-113,-36,-95,-55,2,-60,5,5,43,16,70,28,-65,-29,-102,-11,45,-44,2,85,116,51,121,-74,-98,-23,30,-17,-92,-66,95,78,-94,117,-11,71,74,32,86,6,59,114,-101,74,111,-20,41,15,-7,-76,-49,-46,-45,-64, 
  /* [11][0][][] */ 120,16,-11,117,125,53,62,33,127,104,-79,125,0,-87,35,-66,-58,-103,69,50,40,85,31,-115,-111,-95,-17,79,87,-11,33,-19,-89,-71,58,48,-64,87,-29,-64,-23,119,-75,8,-38,-59,-91,-94,88,116,123,57,-98,-89,25,37,-70,-57,-23,-94,-83,99,92,13,13,100,-57,30,100,68,-83,-73,47,121,-118,59,-70,40,-44,104,-110,-25,-75,-42,55,-87,19,-22,-98,-2,11,-117,-89,-31,-78,-33, 
  /* [12][0][][] */ 19,75,-52,5,95,10,-31,38,-71,68,-10,21,-38,19,55,-75,-98,-26,-45,-77,31,-5,23,105,-62,-44,109,-98,98,18,-31,124,-81,-66,-45,19,2,-71,-14,47,125,47,-108,-37,-14,-79,-34,125,-40,-113,-75,114,43,6,-80,96,-15,-56,68,74,66,122,-2,64,114,40,-42,122,66,111,48,79,91,127,-20,-1,-32,41,-115,-89,-53,113,48,21,-31,37,61,124,-93,-106,95,44,112,-10,32,86, 
  /* [13][0][][] */ 119,-57,110,104,99,117,88,68,82,-101,16,-24,100,79,74,-43,-118,-66,-73,35,73,-24,126,-45,-61,47,11,22,-89,-93,91,43,50,113,-20,41,-83,-25,29,74,-60,85,-49,16,-38,35,4,-27,42,107,-33,-104,-99,36,108,-77,-46,34,-9,-73,-23,123,-76,22,-58,-59,-91,91,-32,-7,105,3,-90,47,-82,-39,-105,74,88,-57,59,-93,98,27,-79,-101,101,127,-8,-48,-77,55,123,-48,71,1, 
  /* [14][0][][] */ -63,-96,95,72,86,-26,-14,-121,-78,-30,74,86,-31,-81,-91,-82,-50,-55,16,27,-47,37,4,66,-109,-71,-30,36,-121,-120,-77,41,116,-19,-37,7,106,123,32,-119,-5,-114,35,97,73,-114,67,-89,127,37,59,56,105,-18,-15,15,-44,15,30,107,-16,-85,-25,80,-111,-9,83,-120,-94,-96,-85,91,9,91,46,-71,62,-105,60,43,50,-17,-126,-41,-116,-92,-112,112,112,13,90,-56,93,106,-20,65, 
  /* [15][0][][] */ 9,-32,-35,64,84,-90,52,-101,50,-10,-78,1,94,-6,-96,-119,80,2,-98,16,39,11,64,100,72,59,31,84,13,50,57,-106,-3,0,-72,-10,-74,104,102,-73,9,103,-55,-30,18,-84,-50,-86,-16,-88,-12,22,-105,-107,-55,-15,61,44,-56,101,-52,-74,-5,93,-38,89,-78,-3,-67,-2,53,-80,11,-21,53,-113,-8,47,96,69,-88,51,-115,-69,-127,-43,-99,30,76,62,-118,-46,46,100,-113,104, 
  /* [16][0][][] */ -81,-4,105,-72,39,119,-65,40,44,45,-122,69,-25,-59,-62,-72,111,77,71,63,114,79,-48,51,-44,52,-80,63,-113,11,37,9,-122,77,55,60,-43,52,-58,-78,18,-57,72,93,60,105,103,-19,-69,-127,2,113,-50,119,68,41,24,91,60,9,119,112,34,59,61,8,-45,97,39,100,-40,-17,28,90,71,88,-17,101,-124,-23,8,-96,61,6,6,104,104,4,79,8,-17,122,68,-41,-93,20, 
  /* [17][0][][] */ 51,-105,40,99,-22,-114,-45,-103,64,-62,93,75,119,81,-92,67,47,72,110,127,-69,5,29,-36,40,84,-54,46,123,-45,-10,81,-20,-12,49,3,-33,109,-83,-31,-76,-20,6,-12,23,24,99,-95,93,127,1,43,0,86,85,-49,-127,99,-72,-92,49,-66,56,114,-99,-50,57,-103,-80,19,118,45,11,-90,-87,76,108,-34,57,-35,31,4,-56,-73,-88,74,97,-12,38,88,-88,-115,12,112,27,36, 
  /* [18][0][][] */ -92,106,105,-63,17,-88,-93,24,-5,89,-94,-40,-19,37,61,-48,28,-20,71,3,99,-39,26,-66,43,-83,-15,107,34,55,5,65,43,-14,-106,-74,-20,40,-14,57,-30,6,-30,5,-98,24,28,4,22,-20,70,46,-88,16,12,83,-24,45,-21,-97,83,107,26,32,-39,-94,-26,78,76,-59,-60,107,-85,-17,-54,-89,70,59,2,-64,-44,-2,-17,-53,100,-28,71,83,-92,-64,-53,127,98,-48,65,-8, 
  /* [19][0][][] */ 19,26,75,35,61,-90,95,92,92,-69,25,-18,-104,30,-63,58,72,-115,111,59,-28,79,-63,9,76,-88,25,-75,-100,-125,-73,45,78,-90,29,-5,4,-76,-62,-110,42,-126,-91,7,-94,27,77,-102,-34,36,-29,44,-41,12,5,-14,21,98,3,-33,58,-60,105,60,-73,-7,-33,-6,-11,52,73,-56,-69,-127,-59,-88,-27,-122,10,106,56,-122,-36,77,-95,-12,3,-9,88,26,-7,66,-37,112,70,-54, 
  /* [20][0][][] */ -14,69,69,94,-94,94,16,58,11,8,-92,-1,-13,86,39,-80,-55,-42,-72,-36,21,-49,-82,-76,74,-79,-111,46,22,10,-45,114,99,42,-15,56,39,-36,-19,-114,-90,-39,-95,-108,-32,-70,-75,106,60,-127,-108,38,45,111,52,-4,92,72,91,88,112,-59,-70,-40,-28,-72,-56,13,-92,-83,-74,79,-69,-92,36,16,110,76,110,106,85,1,88,-29,58,117,-19,73,18,95,28,68,19,22,-6,-1, 
  /* [21][0][][] */ 101,82,76,-105,102,-80,78,15,1,-62,-74,46,10,42,-52,-90,-106,-27,31,-16,112,-49,77,-86,63,-90,-31,78,13,7,-5,-21,13,24,-101,-117,118,102,-124,-36,-5,9,32,-13,-100,-83,-81,96,-20,-70,-5,92,41,75,-103,29,-49,57,-46,127,59,-79,8,-9,82,35,-36,-75,-106,1,67,81,37,-17,68,73,-113,-28,66,115,16,107,31,-73,29,-100,69,-84,-109,84,109,-122,-44,-66,69,-26, 
  /* [22][0][][] */ 39,-50,-70,-94,83,-58,113,57,-90,90,-72,-103,97,-109,-110,-80,43,90,-127,-55,89,-69,36,35,98,-1,-109,103,-59,-87,-61,-109,57,65,19,15,7,-11,-63,-113,6,-9,7,97,61,-114,96,-19,-59,-80,-9,-15,-62,-89,-46,38,-13,-27,-33,-26,110,-71,-75,-109,-72,23,-109,-47,118,111,-19,-1,-68,15,67,-88,44,-47,68,100,111,-97,-82,-117,84,89,102,-31,-56,36,-61,55,24,25,-33,107, 
  /* [23][0][][] */ 69,-88,9,63,103,-119,8,-107,64,-77,91,83,22,-106,23,-36,94,-28,-106,108,98,-80,111,-33,-11,-10,90,25,74,51,78,-37,-33,49,21,37,104,-3,-116,7,-104,5,14,-110,-66,-89,121,30,85,-108,-103,-49,88,-58,-53,97,-83,-18,114,50,-113,-91,-55,-5,31,43,-116,-114,71,-10,121,-72,-4,-28,-45,-94,50,-19,100,127,-50,-48,19,-104,101,10,121,-17,-91,48,108,-11,113,-49,-31,93, 
  /* [24][0][][] */ -74,-45,-103,-76,-83,-109,-66,-95,72,127,87,52,108,68,-35,-114,-78,49,31,-49,98,-78,-52,-34,58,-25,81,62,112,61,10,-59,-3,14,49,33,-49,-82,59,-21,-70,-98,111,9,28,-32,50,77,-92,-42,-40,23,76,64,72,-71,2,80,19,6,96,-2,42,105,-116,104,-44,-98,-95,60,-58,-27,-43,49,99,107,68,-73,-103,-81,-75,-92,-71,-113,8,71,-10,-96,29,-104,3,-78,-11,36,-93,39, 
  /* [25][0][][] */ -93,-60,-82,-13,89,-73,-108,49,48,-110,-43,23,77,-4,-118,-22,-76,63,37,-124,67,85,-12,-61,13,-65,-106,40,74,-92,38,115,97,-114,28,70,102,-73,-29,-28,-94,96,-110,2,94,41,57,31,-108,93,-81,1,47,-24,-74,1,-16,50,-125,76,117,40,32,46,-2,78,-20,-19,-99,-7,-22,-127,36,-123,58,24,76,75,14,25,50,49,-57,84,-79,-56,-108,-92,-26,-37,102,6,-122,-21,-26,-86, 
  /* [26][0][][] */ 52,-121,-25,-16,-102,-6,-13,-15,-112,-127,104,82,-84,-51,8,-19,112,26,-83,-73,11,69,97,12,48,60,10,45,12,3,-96,-5,-35,-65,-97,-106,-69,82,-55,109,-102,99,53,30,-76,69,-44,101,-26,26,-8,97,8,-51,-6,-111,94,62,45,23,-1,-97,64,-25,116,-23,-59,58,-91,75,84,95,78,-102,-83,5,43,-111,-99,5,-32,71,84,-78,76,-1,-48,10,-84,111,11,16,-60,110,50,84, 
  /* [27][0][][] */ 7,4,-71,-113,-126,-65,-78,-22,40,100,35,-119,-32,55,81,-35,64,-22,69,-90,-104,7,-35,-30,-114,44,-119,-6,66,29,-39,-14,59,68,-100,-97,-99,-73,-123,89,-105,13,25,13,99,21,67,104,90,83,59,-82,-96,-95,-11,-41,105,-31,-117,-87,-65,-71,-40,53,40,-54,-123,107,48,6,-127,3,61,-60,-12,-97,48,-74,88,103,85,-32,118,-64,-83,-92,-40,29,-56,-9,-40,-56,55,15,88,55, 
  /* [28][0][][] */ 88,-12,81,37,-120,-67,-110,-87,-48,-116,53,70,-83,-97,-5,96,88,107,-75,76,-35,15,-121,-87,-127,77,-95,-69,-79,-79,-9,-20,-114,8,75,68,10,-119,-49,23,100,35,-106,44,-120,-17,7,41,15,-66,-83,-37,-93,18,50,37,57,-21,79,45,-9,-52,-102,1,54,68,-31,76,-83,20,-117,-50,64,37,-11,-112,-124,-76,-98,38,-85,-102,110,-37,55,-123,59,-91,-113,-81,-44,-69,-44,53,-103,-75, 
  /* [29][0][][] */ 50,52,55,-59,-93,12,-127,6,98,-20,-97,-103,106,-113,-54,-53,-106,102,25,-74,-83,-39,53,2,-41,5,-50,-32,-107,-11,104,-8,48,-3,-83,-60,-14,103,-12,97,46,107,-51,84,-5,106,-61,-29,14,-10,57,-103,71,-109,114,43,-102,55,-60,110,-126,100,-100,-58,-64,-71,52,92,96,-94,31,-78,114,75,68,23,116,-69,-35,28,-10,-91,-10,-85,62,119,42,77,-42,97,72,83,-111,13,-5,57, 
  /* [30][0][][] */ 26,-65,-68,32,-100,21,-71,-19,116,-13,-6,-44,-103,16,56,21,-9,36,92,-109,39,-109,-121,9,-102,19,-77,114,-18,-110,-97,1,-81,-73,-127,-55,12,-22,-9,19,86,-85,-13,97,102,-47,104,57,-81,74,19,-110,94,-55,-14,100,-83,-57,-80,-52,-109,-9,-79,-23,-111,-95,-103,87,-67,114,48,-40,-92,104,39,-93,-66,-79,-83,-62,24,33,-112,-22,-116,26,-112,111,-42,-125,76,59,-38,-8,13,-72, 
  /* [31][0][][] */ 77,-99,33,97,50,62,-65,-104,-36,-25,-85,-91,102,-127,-52,107,-66,-96,36,47,61,31,-36,103,40,-118,33,37,-76,-76,43,106,13,16,-95,-13,94,-36,-70,-116,56,-75,-32,28,0,-60,-45,21,66,24,102,-34,-118,-62,-85,21,-122,64,9,111,-41,-7,86,-81,74,109,-50,-81,72,-121,-123,7,-101,-45,0,2,-63,-52,46,86,-81,-45,56,69,52,93,-102,13,14,-57,-89,-58,11,101,-8,-19, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018745411653071642, 0.0017951475456357002, 0.0017677434952929616, 0.0017777775647118688, 0.001783447340130806, 0.001695760409347713, 0.0017758868634700775, 0.0017531380290165544, 0.0017858792562037706, 0.0018220149213448167, 0.0017433222383260727, 0.00169040123000741, 0.0017721399199217558, 0.0017734458670020103, 0.0017658681608736515, 0.0018461892614141107, 0.0016903765499591827, 0.0019130118889734149, 0.0019665604922920465, 0.0017333247233182192, 0.0017561911372467875, 0.0017532884376123548, 0.0018323720432817936, 0.0017732128035277128, 0.0017976196249946952, 0.0017779015470296144, 0.0018200005870312452, 0.0017210931982845068, 0.0017538127722218633, 0.0017319585895165801, 0.0017712129047140479, 0.0018091333331540227, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2683, 4288, 9810, 3750, -4124, -5274, 27363, 2822, 3942, -2175, 10853, -300, -9719, 2726, 17501, 7591, 15574, 7203, -4562, -7668, 5662, 50125, 25199, 19773, 1234, 1128, 6941, 3461, 2533, -5383, 7970, -2995, -443, 5749, 6, 1319, 13675, 5394, -2001, 6113, 10210, 6147, 6460, 15438, 4711, 5050, 2338, 8286, 5738, -6406, -8003, 590, -256, -1561, 2596, 26, 257, -1119, -3936, 11540, -1125, 1470, -1530, -2184, -5119, 9427, 28969, 2342, -3030, 1088, 1876, 2446, 2099, -1453, 810, 12673, -573, 25257, 20427, -1038, 12588, 2118, -526, 1357, 22152, 8587, 5111, 1650, 5837, 4680, -371, -9294, 979, -2158, -2035, -2452, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0002296975435456261, 0.00036320913932286203, 0.00024275564646814018, 0.00023731031978968531, 0.00025435799034312367, 0.00028094477602280676, 0.00012184533261461183, 0.00025147385895252228, 0.00015037378761917353, 0.00030578696168959141, 0.00018467383051756769, 0.00021237383771222085, 0.0002612678799778223, 0.0010439542820677161, 0.00017735754954628646, 0.00015354725474026054, 0.00012070600496372208, 0.00019941850041504949, 0.0004306875925976783, 0.00021976370771881193, 0.00010888185352087021, 5.3723149903817102e-05, 0.00012212779256515205, 8.3579405327327549e-05, 0.00014786480460315943, 0.00041858784970827401, 0.00043096797890029848, 0.00030888072797097266, 0.00020818640768993646, 0.00036509023630060256, 0.0001857575261965394, 0.00025890313554555178, 0.00016385418712161481, 0.00020234906696714461, 0.00027046113973483443, 0.00019314991368446499, 0.00013843353372067213, 0.00019711963250301778, 0.00030306156259030104, 0.00028899897006340325, 0.00012457618140615523, 0.00042020782711915672, 0.00023584453447256237, 0.00014959386317059398, 0.0004046472895424813, 0.00019776850240305066, 0.0002194378903368488, 0.0002601724409032613, 0.00023418787168338895, 0.00020651065278798342, 0.00019664045248646289, 0.00018180262122768909, 0.00055124989012256265, 0.00019019813043996692, 0.00029812776483595371, 0.00030294898897409439, 0.00036037687095813453, 0.0002542426809668541, 0.00038950052112340927, 0.0001591715554241091, 0.00067487731575965881, 0.00044820192852057517, 0.00017557198589202017, 0.00035724835470318794, 0.00036432460183277726, 0.00020448832947295159, 7.4634328484535217e-05, 0.00016273680375888944, 0.0003783634165301919, 0.00030920124845579267, 0.00021387355809565634, 0.00021101596939843148, 0.00063997018150985241, 0.00028007474611513317, 0.00020592896908055991, 0.00016929568664636463, 0.00024583106278441846, 7.3178314778488129e-05, 8.8643035269342363e-05, 0.00018309683946426958, 0.00011523228749865666, 0.00015962707402650267, 0.00016092714213300496, 0.00018476358673069626, 8.1607453466858715e-05, 0.00027671438874676824, 0.00045819103252142668, 0.00016801571473479271, 0.00011928404273930937, 0.00043584301602095366, 0.00024009548360481858, 0.00021399346587713808, 0.00023457348288502544, 0.00048511300701647997, 0.00030246085952967405, 0.00016651851183269173, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -27,86,-12,-127,-40,-41,-39,-81,-28,17,7,85,6,-60,-2,55, 
  /* [1][0][][] */ -28,28,-55,1,-22,-24,22,-75,67,45,-64,23,-4,-3,34,-127, 
  /* [2][0][][] */ 8,21,-43,46,52,29,-54,-46,127,-37,-14,19,-21,75,-72,16, 
  /* [3][0][][] */ 39,-86,-5,-108,0,-37,-4,-14,106,6,92,35,-26,53,23,127, 
  /* [4][0][][] */ -89,45,26,39,16,-24,-11,35,4,3,29,-31,-127,-12,-14,32, 
  /* [5][0][][] */ 11,74,118,-2,21,89,-85,87,-60,71,-33,-28,31,-52,-127,26, 
  /* [6][0][][] */ 26,-70,106,-127,30,-10,-39,85,-85,-88,64,-42,-1,90,-14,91, 
  /* [7][0][][] */ 51,123,-31,-58,107,5,-9,-63,127,93,-26,29,20,-38,64,44, 
  /* [8][0][][] */ 14,-85,13,-77,25,-56,20,-75,25,61,74,-8,14,127,74,57, 
  /* [9][0][][] */ 12,-26,-5,127,46,-7,34,-58,-64,103,24,-17,-12,-67,-8,-14, 
  /* [10][0][][] */ -14,13,-43,-127,4,-11,-8,24,19,-39,29,-29,-10,-36,4,36, 
  /* [11][0][][] */ -3,9,23,-21,71,-34,89,-63,-90,39,5,24,5,127,-63,-26, 
  /* [12][0][][] */ 49,-31,-127,0,17,-57,43,29,31,68,-56,-52,-24,122,-9,19, 
  /* [13][0][][] */ -17,1,-29,7,2,-127,-3,14,1,-9,10,-4,9,-16,12,10, 
  /* [14][0][][] */ 17,-42,91,-38,59,-3,-127,-112,-31,-35,41,11,3,-60,-14,-28, 
  /* [15][0][][] */ -102,13,-31,-61,10,2,127,62,-32,42,78,-26,21,82,75,9, 
  /* [16][0][][] */ 8,50,127,95,0,21,93,72,-91,19,-71,-4,21,9,12,-83, 
  /* [17][0][][] */ -35,-103,-13,30,-75,-24,-65,19,-127,-38,9,-42,1,42,67,-35, 
  /* [18][0][][] */ 8,49,10,72,48,10,16,0,73,38,-36,-26,10,127,63,24, 
  /* [19][0][][] */ 0,-20,59,8,111,20,-107,-87,-108,-103,-28,-127,-57,-36,6,-35, 
  /* [20][0][][] */ 105,-47,-70,-21,-4,-127,22,26,-53,52,-100,-25,17,10,18,-12, 
  /* [21][0][][] */ 100,-11,85,-35,-7,-1,-29,125,4,-127,68,52,-7,124,51,105, 
  /* [22][0][][] */ -32,26,-44,127,-60,2,94,52,-17,43,-1,31,2,14,31,4, 
  /* [23][0][][] */ 46,20,111,-72,75,-7,-21,66,13,8,-6,-5,2,-25,-127,11, 
  /* [24][0][][] */ -127,46,15,-16,8,114,28,-16,3,18,99,-4,-82,16,62,-32, 
  /* [25][0][][] */ 24,24,11,19,13,14,68,-44,1,-127,-17,-14,-7,-30,11,23, 
  /* [26][0][][] */ -42,-11,-8,3,-54,-14,-39,-43,-114,-33,9,-39,4,127,-34,57, 
  /* [27][0][][] */ -2,35,10,70,34,-25,-19,-27,63,10,-32,4,10,127,-12,10, 
  /* [28][0][][] */ 8,65,71,60,127,-14,36,29,-102,-20,-45,-43,22,100,48,-32, 
  /* [29][0][][] */ -7,-5,6,18,26,1,13,39,-14,-6,-9,-127,3,-10,-16,0, 
  /* [30][0][][] */ -23,72,-43,69,-41,-18,45,-127,-45,59,-10,-7,55,39,69,84, 
  /* [31][0][][] */ -31,-16,-21,-78,0,-9,-58,-113,17,77,-21,-127,-40,-55,11,20, 
  /* [32][0][][] */ -127,-74,-3,66,60,43,-19,14,4,-49,-114,53,71,3,61,69, 
  /* [33][0][][] */ -19,-53,-43,2,-104,-6,-79,3,67,27,23,-57,36,-119,127,25, 
  /* [34][0][][] */ 58,-3,69,25,45,25,-53,92,-81,-48,64,26,20,-10,-20,127, 
  /* [35][0][][] */ -48,48,-83,14,-19,-20,30,-127,85,104,-80,-2,10,-4,86,-126, 
  /* [36][0][][] */ -29,57,11,127,29,32,121,40,-4,40,-41,0,3,11,-54,-57, 
  /* [37][0][][] */ 11,-2,8,-58,4,4,-29,-36,-65,-4,-7,-1,10,-127,61,-42, 
  /* [38][0][][] */ 44,83,-14,-54,127,-7,27,-45,105,69,-13,-8,5,-22,51,20, 
  /* [39][0][][] */ -29,77,-9,-127,-8,16,-41,44,57,-72,-32,-11,19,81,41,36, 
  /* [40][0][][] */ 8,-11,8,-87,7,-14,-12,-25,-111,-9,-23,-17,-8,-127,89,-79, 
  /* [41][0][][] */ -3,-13,-45,-15,7,-28,20,-3,-26,7,-54,-2,-127,6,28,40, 
  /* [42][0][][] */ 127,90,-35,-30,-90,-54,-10,-44,8,34,94,-64,-52,57,115,-120, 
  /* [43][0][][] */ 3,127,-65,-13,70,-11,95,-18,66,69,-58,9,24,-124,-78,-41, 
  /* [44][0][][] */ -16,-4,8,-47,63,11,-101,-127,-10,-8,6,13,-1,-44,76,-74, 
  /* [45][0][][] */ 3,57,-127,-33,34,-71,21,-59,20,25,-7,-66,26,-32,48,-32, 
  /* [46][0][][] */ 2,-6,-18,-86,-16,15,19,-36,-126,-24,15,12,-9,-127,63,-30, 
  /* [47][0][][] */ 25,52,29,-14,127,-9,-25,20,-49,42,-4,24,6,0,109,-30, 
  /* [48][0][][] */ -127,-85,-25,42,63,19,18,-20,-2,-10,-111,40,62,12,71,52, 
  /* [49][0][][] */ 12,10,101,79,127,6,35,26,-112,-52,-43,-72,8,111,14,-60, 
  /* [50][0][][] */ 38,-17,-85,-13,28,-127,-41,-14,-11,-32,4,-34,29,-15,-1,15, 
  /* [51][0][][] */ -1,33,44,8,23,2,0,17,-127,55,12,-106,15,-110,-20,88, 
  /* [52][0][][] */ -5,37,3,50,34,-8,33,24,57,88,-18,-60,47,127,59,23, 
  /* [53][0][][] */ -7,-55,-22,-14,-99,-12,-81,-7,46,29,21,-64,25,-127,124,13, 
  /* [54][0][][] */ 63,-7,-39,16,127,86,-109,-34,-70,0,-44,-71,3,-51,-22,-46, 
  /* [55][0][][] */ 39,-10,4,3,36,-36,-59,-127,-39,-70,-48,10,-17,-23,19,-6, 
  /* [56][0][][] */ -14,19,29,-23,-3,-24,-103,75,-12,127,-7,-11,25,3,-7,12, 
  /* [57][0][][] */ -6,24,-43,-16,-49,-54,124,95,-29,24,-20,3,31,17,127,-16, 
  /* [58][0][][] */ 48,10,-127,24,79,91,-39,35,-110,-46,6,21,-32,23,7,-14, 
  /* [59][0][][] */ -92,74,113,25,-69,-60,115,127,25,-3,23,-11,13,6,66,-5, 
  /* [60][0][][] */ 13,-2,-58,-2,21,-127,-25,3,-2,-12,-10,-21,25,-21,-1,1, 
  /* [61][0][][] */ 17,-11,27,127,80,18,22,1,-106,-4,20,40,-15,21,36,-50, 
  /* [62][0][][] */ -49,127,16,-58,-26,-9,-73,56,-18,-72,-89,-54,-7,-98,-55,-31, 
  /* [63][0][][] */ -48,27,-29,127,-78,10,-69,-41,-69,-25,-24,-37,25,60,34,39, 
  /* [64][0][][] */ 6,-1,1,42,2,15,-15,71,34,9,-15,-47,-11,-127,53,-1, 
  /* [65][0][][] */ -25,-55,12,-127,34,-40,63,-49,-20,59,20,-126,-12,7,12,-51, 
  /* [66][0][][] */ 42,-2,76,-17,13,13,-10,127,20,-70,34,45,13,125,12,64, 
  /* [67][0][][] */ 5,60,-16,-127,-6,-5,-65,37,90,-105,-33,0,19,77,72,38, 
  /* [68][0][][] */ -37,30,127,12,10,-2,-5,-7,-47,-22,-13,-41,8,-21,81,-27, 
  /* [69][0][][] */ 127,74,-17,-6,-87,-44,-36,-48,3,19,103,-66,-82,60,66,-96, 
  /* [70][0][][] */ 35,1,-63,-13,-33,28,63,127,-39,104,-30,2,16,67,-26,23, 
  /* [71][0][][] */ 6,3,-4,15,11,-80,-1,29,-30,22,-87,7,-127,-5,39,44, 
  /* [72][0][][] */ 14,29,-127,20,15,20,25,102,-39,-32,3,-3,21,8,-5,7, 
  /* [73][0][][] */ -53,21,48,13,52,-41,-74,-127,17,-73,43,-21,9,-44,36,-18, 
  /* [74][0][][] */ 5,36,37,127,22,-2,-71,85,-60,21,-50,41,15,-107,30,-94, 
  /* [75][0][][] */ -4,36,-50,17,15,6,19,-7,127,33,-22,5,21,107,-46,-6, 
  /* [76][0][][] */ 4,-10,1,21,6,-14,-17,66,12,-36,-25,-127,-8,-9,7,10, 
  /* [77][0][][] */ -2,20,-34,127,-60,33,90,116,22,59,-25,43,-22,-21,-7,-8, 
  /* [78][0][][] */ 10,-12,17,-113,37,-25,-25,40,25,-37,3,-29,23,127,24,50, 
  /* [79][0][][] */ -26,-108,-82,-49,-96,3,30,-84,127,30,30,56,16,45,37,-58, 
  /* [80][0][][] */ -33,9,127,-110,33,-42,-1,-86,-70,38,-60,-101,35,98,99,-37, 
  /* [81][0][][] */ -52,39,-127,26,67,-127,-15,50,-9,-41,69,-6,28,1,12,0, 
  /* [82][0][][] */ 127,-15,-12,16,13,-118,-18,13,-23,-11,-104,-3,106,5,-6,28, 
  /* [83][0][][] */ -30,78,-127,-92,-26,-21,38,-126,75,47,-48,-120,10,44,55,109, 
  /* [84][0][][] */ -28,50,89,-36,15,-21,77,-127,-48,56,-25,-59,42,64,81,-14, 
  /* [85][0][][] */ -76,127,31,-113,-67,-24,-23,1,-48,2,-71,27,3,-11,-96,-33, 
  /* [86][0][][] */ -7,2,-34,10,-30,-33,127,18,-5,-28,2,9,-1,25,81,-17, 
  /* [87][0][][] */ -24,-36,2,-127,14,-41,53,-21,-10,15,-13,-127,-24,-1,14,-37, 
  /* [88][0][][] */ 80,-17,36,-15,25,-110,-8,22,-55,28,-127,-42,45,15,74,1, 
  /* [89][0][][] */ 27,-18,-42,-52,30,-7,-20,-1,-48,2,25,-59,127,-12,32,-42, 
  /* [90][0][][] */ -8,-56,35,-51,61,-2,-58,76,58,-71,-29,-30,-21,115,12,-127, 
  /* [91][0][][] */ -43,-4,-27,-43,22,-20,-33,-106,5,65,-15,-127,-35,-21,8,7, 
  /* [92][0][][] */ -28,18,46,17,-1,-127,12,-3,-2,-25,5,-17,2,-23,19,4, 
  /* [93][0][][] */ 41,-15,127,-8,-46,57,22,-23,-17,21,-74,-14,-22,-6,27,0, 
  /* [94][0][][] */ 22,-4,-13,-20,22,-11,-16,-10,-38,-21,19,-62,127,-18,26,-26, 
  /* [95][0][][] */ 127,96,4,39,-87,-9,-62,1,-26,-19,82,-39,-40,27,70,-75, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00070583360502496362, 0.0011160990688949823, 0.00074595963815227151, 0.00072922679828479886, 0.00078161223791539669, 0.00086331035709008574, 0.00037441641325131059, 0.00077274965588003397, 0.00046208102139644325, 0.00093964743427932262, 0.00056748103816062212, 0.00065259990515187383, 0.0008028455195017159, 0.0032079489901661873, 0.00054499896941706538, 0.00047183272545225918, 0.00037091539707034826, 0.0006127896485850215, 0.0013234524521976709, 0.00067530811065807939, 0.00033458115649409592, 0.0001650849444558844, 0.00037528437678702176, 0.00025682972045615315, 0.00045437121298164129, 0.001286271377466619, 0.0013243140419945121, 0.0009491542587056756, 0.0006397324032150209, 0.0011218794388696551, 0.00057081109844148159, 0.00079557893332093954, 0.00050350470701232553, 0.00062179495580494404, 0.00083109538536518812, 0.00059352704556658864, 0.00042538999696262181, 0.00060572550864890218, 0.00093127263244241476, 0.00088805990526452661, 0.00038280800799839199, 0.0012912494130432606, 0.00072472257306799293, 0.0004596844082698226, 0.0012434336822479963, 0.000607719412073493, 0.00067430688068270683, 0.00079947937047109008, 0.00071963184745982289, 0.00063458300428465009, 0.00060425302945077419, 0.00055865815375000238, 0.0016939262859523296, 0.00058445654576644301, 0.0009161116904579103, 0.00093092670431360602, 0.0011073958594352007, 0.00078125798609107733, 0.0011968894395977259, 0.00048911554040387273, 0.0020738188177347183, 0.0013772719539701939, 0.0005395121406763792, 0.0010977822821587324, 0.0011195268016308546, 0.00062836863799020648, 0.00022934254957363009, 0.000500071095302701, 0.0011626663617789745, 0.00095013913232833147, 0.00065720838028937578, 0.00064842734718695283, 0.0019665532745420933, 0.00086063687922433019, 0.00063279556343331933, 0.00052022578893229365, 0.00075541000114753842, 0.00022486837406177074, 0.00027238964685238898, 0.00056263513397425413, 0.00035409530391916633, 0.00049051526002585888, 0.00049451022641733289, 0.00056775682605803013, 0.00025077012833207846, 0.00085031084017828107, 0.0014079672982916236, 0.00051629258086904883, 0.00036654586438089609, 0.0013392944820225239, 0.00073778524529188871, 0.00065757683478295803, 0.00072081678081303835, 0.0014906954020261765, 0.00092942675109952688, 0.00051169184735044837, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -10242, 17844, -17595, -3853, -9947, 10415, 28914, -52247, -4224, 15637, 22651, 14061, -11879, 14007, -3079, 12670, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00075583712896332145, 0.00042006745934486389, 0.0002188146609114483, 0.00023248673824127764, 0.00039424389251507819, 0.00038305329508148134, 0.0003798817633651197, 0.00027168547967448831, 0.0003046724887099117, 0.00026891016750596464, 0.0007506810943596065, 0.00059532705927267671, 0.00039778134669177234, 0.0001930956932483241, 0.00056135794147849083, 0.00051175622502341866, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -13,-16,4,-28,15,-5,-36,-1,19,3,-15,8,-7,-12,-23,1,1,6,0,3,8,-35,7,10,0,12,9,127,29,-39,48,-14,-5,9,7,2,-5,15,-39,-5,-16,10,-7,36,5,20,7,7,22,1,-10,7,15,-19,-9,86,7,13,-25,-35,-4,27,1,-23,-38,-64,-18,37,9,14,21,-16,-3,-30,-9,-20,-22,21,7,1,-13,-31,25,21,-7,-13,-6,-98,-1,-16,10,-7,51,-27,-35,-16, 
  /* [1][0][][] */ 30,-66,-75,-69,127,-18,61,43,-32,-98,-57,-22,2,-7,-72,42,-82,-3,40,39,27,49,-25,-51,25,-18,-22,-64,41,-23,-74,45,-15,23,-5,-11,2,-18,-3,21,-32,35,-36,-28,-47,88,18,17,28,-75,22,-49,-22,47,51,3,-51,-29,-44,-38,22,-30,1,-48,-101,108,-26,-23,-13,-37,-25,11,53,-111,-24,-8,27,-63,39,19,12,-27,22,-1,-44,37,-25,33,35,-49,3,20,18,10,34,94, 
  /* [2][0][][] */ -4,50,-80,-6,101,76,39,79,3,-107,-3,-23,-10,-10,37,34,15,-7,-46,76,9,-11,80,25,42,33,-4,-48,24,-19,37,-64,25,49,-18,28,-127,-76,18,25,-8,-39,11,-10,13,-41,-4,68,-39,19,-32,-2,81,-9,-1,62,31,16,38,-1,18,25,30,-32,21,-1,-26,2,-39,9,-8,-35,-42,-72,4,69,79,57,36,-13,19,-38,9,-6,-50,18,19,34,-30,20,-3,-31,1,-42,-62,10, 
  /* [3][0][][] */ 63,26,80,-8,41,-31,27,-4,-12,-70,17,-45,-3,32,41,95,16,-2,16,12,127,-10,28,29,51,-12,-15,20,35,36,-12,77,-92,24,22,-5,-26,-31,-9,36,-78,-34,53,16,22,33,-42,-76,-58,-35,-41,40,-7,-117,5,17,-102,73,51,42,12,91,-9,-48,28,73,0,-38,20,-22,4,-68,44,-43,47,-25,14,-7,51,48,-24,-72,12,-13,-26,19,30,34,20,7,25,33,26,90,43,-38, 
  /* [4][0][][] */ 18,0,14,-9,127,33,1,-17,-33,-48,-34,-36,-48,20,-2,54,25,-84,-36,87,-14,-1,25,-13,-5,-1,15,-45,8,-13,59,-33,81,17,-13,10,34,20,13,11,-32,-4,-42,-23,4,-56,-13,15,37,12,-15,8,-10,-44,11,-28,22,-11,-33,26,0,59,61,14,39,46,-12,-1,-39,-1,45,57,9,-73,-46,-30,38,32,86,-32,-12,-32,2,-5,-67,4,42,49,-45,22,3,-48,14,3,22,-9, 
  /* [5][0][][] */ 4,-7,-24,9,19,-11,34,-29,-28,-34,-15,12,2,32,-8,21,-15,-11,16,-11,42,17,-42,64,15,-8,10,-94,-1,32,10,32,0,-5,1,-53,26,16,3,11,-5,-13,24,-24,2,4,7,-21,-10,-16,13,-27,2,-32,-9,-58,-7,8,-25,20,71,10,10,34,-12,57,4,77,6,86,8,28,6,11,-4,59,-29,-18,13,16,-2,-11,7,17,-5,25,-15,127,4,30,8,-7,1,17,-52,14, 
  /* [6][0][][] */ 27,-88,15,-31,-23,4,39,23,13,-6,-18,-73,-45,-9,-20,36,21,1,1,-6,-43,31,18,12,-26,2,-12,-19,-23,13,37,-7,51,17,65,-12,-2,-11,5,-86,-25,93,1,-29,5,-29,-20,22,-22,39,-33,66,-27,-60,-7,-1,16,-63,0,-6,-12,56,37,-75,30,-27,8,-20,-11,6,127,0,-45,0,-31,21,-79,-1,21,-8,24,40,12,0,-32,-2,41,15,5,8,39,-41,-10,-10,-32,-17, 
  /* [7][0][][] */ 8,127,36,15,107,50,52,-33,-25,-30,41,-8,-17,25,23,19,12,-47,6,31,51,-27,34,23,-1,14,15,7,17,-18,14,15,39,-6,-41,15,24,6,-6,81,-51,21,10,18,-13,-23,16,-16,-25,-32,26,2,22,-42,-27,49,42,4,-12,-4,-17,-44,3,3,-47,77,-23,-84,-12,-49,-4,61,-20,-26,17,9,59,56,47,-20,-38,-36,-6,-3,-23,59,-8,-9,-36,28,-28,-36,-44,-12,33,-6, 
  /* [8][0][][] */ 6,0,47,26,-127,-26,36,-23,20,89,63,14,-9,19,15,1,-43,5,21,-6,-43,6,-104,60,22,-43,55,-9,9,9,1,56,81,-30,-6,-2,-22,-17,1,39,21,-29,50,-1,-38,5,40,-6,-96,7,20,18,-50,-37,-31,41,19,-54,-78,-18,15,-28,-28,-4,7,69,-10,-54,18,-20,-49,-17,44,57,59,-13,-24,-40,-7,24,-80,12,-17,-6,27,24,56,44,25,-35,42,54,5,7,47,8, 
  /* [9][0][][] */ 9,-100,-15,16,86,84,-42,-27,23,-44,91,94,-13,23,87,-113,10,-40,-13,6,-45,-41,25,-16,-18,-3,-11,40,-19,12,1,-6,26,9,-116,49,-3,6,-7,68,42,-83,-15,60,10,-7,-80,-35,39,24,-10,-79,68,38,-19,-58,-1,91,-19,18,18,-52,-35,127,-93,-16,-10,-22,-7,36,-64,-87,49,-3,8,25,55,-73,19,10,1,-19,5,22,4,-59,26,-1,10,-31,-62,42,-71,2,-8,-55, 
  /* [10][0][][] */ -40,-25,-26,-37,-20,-8,65,-18,38,16,21,34,22,-15,-1,-3,-1,28,-23,-14,-9,24,22,20,-14,-5,12,-127,21,-45,53,-36,-4,25,-3,-14,0,36,-5,-4,5,-28,22,-43,4,-5,24,14,-11,38,-30,-11,-40,-22,-2,-48,20,17,0,-38,24,13,-3,10,-27,81,-11,-27,14,-21,3,-16,-23,-7,16,58,-3,42,-16,12,-24,-3,5,25,3,-23,-4,106,-7,-1,7,7,22,-35,36,-34, 
  /* [11][0][][] */ -82,20,-5,6,19,-58,-20,1,-47,0,2,26,26,22,-29,-13,57,3,-58,-52,26,-11,-4,-2,67,13,67,-4,-15,28,-35,10,-11,19,-14,-8,-2,9,24,4,-15,-8,-4,8,81,23,80,15,51,49,-8,34,15,-71,27,-1,-68,-16,-32,-44,0,-10,8,26,-1,-29,29,1,23,9,-2,36,-22,17,20,6,-14,86,-126,70,-41,-8,-59,-62,127,28,44,-16,12,46,-27,-62,-22,53,-26,-6, 
  /* [12][0][][] */ -11,-3,-34,0,67,22,-3,-9,-11,14,24,-8,8,-13,37,-16,-38,-7,5,-21,-13,-16,-47,45,-17,39,-17,111,-19,40,-28,10,-9,32,18,36,-14,-23,22,6,-2,-18,-1,4,-11,2,17,21,-4,-13,4,-27,-18,18,-18,-18,-14,-8,21,26,-19,-19,-7,43,51,-79,17,54,-36,-127,-4,52,1,10,18,85,-1,-17,-10,3,-4,19,-51,-2,11,-16,8,-45,-1,21,3,0,-43,34,-17,25, 
  /* [13][0][][] */ -80,53,-2,3,-55,3,-7,18,-23,-22,46,25,80,1,-14,4,-2,46,-36,-2,5,-22,68,-59,58,51,1,-11,-1,-41,-32,-111,-111,-21,3,-5,-1,39,26,-14,-40,96,-7,24,28,3,-15,10,56,-10,24,93,64,-76,90,-3,-12,60,55,-9,16,38,-18,28,14,-32,7,10,20,28,30,-127,18,-23,-90,21,62,56,-43,-61,79,-23,-1,-21,29,-47,97,-4,-39,-10,-23,15,49,-42,-23,12, 
  /* [14][0][][] */ -37,13,-3,-56,38,-5,-7,34,-84,-4,23,7,-26,-69,-74,-22,-87,-7,67,11,21,-4,17,-102,-41,17,-58,-21,4,-21,-15,-33,-70,-19,32,12,-20,0,2,1,4,86,-69,-13,-56,14,6,11,127,-31,23,-12,28,57,-103,20,-29,32,-96,6,4,26,34,25,2,29,-2,-3,-58,26,60,36,32,-3,-26,20,49,-74,-29,-108,15,-33,5,39,27,-78,-43,12,-44,23,23,49,12,30,17,-12, 
  /* [15][0][][] */ -36,-87,-12,-33,9,4,0,-66,-16,17,-11,-27,36,-19,54,-21,-86,4,-15,16,-24,-1,-62,-48,-17,8,1,15,-22,-21,71,-101,-14,39,25,2,3,31,-107,4,26,-67,2,38,-34,-49,61,34,43,27,-16,-127,-11,47,-1,49,40,-6,-19,41,11,4,46,-3,8,-12,-12,-4,-32,29,12,40,-37,0,-6,-30,-29,-4,3,3,-8,37,-6,76,-21,-51,-35,-40,-51,69,23,76,-38,2,-4,-18, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032123077660799026, 0.017852867022156715, 0.0092996228486299515, 0.0098806861788034439, 0.016755364835262299, 0.016279764473438263, 0.016144974157214165, 0.011546633206307888, 0.012948580086231232, 0.011428682133555412, 0.031903944909572601, 0.025301400572061539, 0.016905706375837326, 0.008206566795706749, 0.023857710883021355, 0.021749639883637428, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 18376, 65735, -1115, -613, 14741, -4940, 530, 238, 5876, 18929, -4820, -608, 297, 5394, 5030, -8760, -3869, -247, 79, 14136, -10398, 12566, -2550, 6070, 33223, -240, -4852, 17534, 13792, -19205, 1643, 22256, 23680, -10708, 2138, -174, -699, -977, 4470, -7660, -5032, -510, -8398, -25, 29716, -1382, 13104, -2414, -14773, 2620, -66, -34, -2070, 19904, -3916, 16306, 18121, 301, 34148, 414, -8715, -535, 1556, 319, -1113, 14107, -1786, -10797, -2320, 3652, 81, -3488, 1826, 277, -1567, -4946, 94, -1931, 46809, -6733, -5895, -11978, -1017, -130, 73052, -11993, -10025, -27633, -8147, 8497, -2692, 34832, 64, -1877, -3199, 775, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012283855176065117, 8.5781866800971329e-05, 0.00010741384903667495, 0.0002199413429480046, 0.00022459306637756526, 0.00016752643568906933, 5.1106359023833647e-05, 8.5758045315742493e-05, 0.00027676924946717918, 0.00012767530279234052, 0.00024958467110991478, 0.00011091107444372028, 0.00025362157612107694, 0.00021008266776334494, 0.00043548402027226985, 0.0001581697870278731, 0.0001952861639438197, 0.00014744751388207078, 0.00013955339090898633, 7.6746924605686218e-05, 7.6964548497926444e-05, 4.6374829253181815e-05, 0.00013098008639644831, 0.00011877236829604954, 0.00011127514881081879, 9.6808827947825193e-05, 0.00020008622959721833, 0.00017230834055226296, 7.4796713306568563e-05, 0.00043312544585205615, 0.0004003163194283843, 0.00022644596174359322, 0.00012489412620197982, 0.00013887113891541958, 0.00020770827541127801, 0.00042886848677881062, 0.00036683864891529083, 0.0001971401070477441, 0.00024377895169891417, 0.00010799248411785811, 0.0002301298372913152, 0.0002004207344725728, 0.00034655173658393323, 7.5923046097159386e-05, 0.00037509392132051289, 9.348975436296314e-05, 0.00011929887114092708, 0.00020946584118064493, 0.00069383066147565842, 0.00010373512486694381, 0.00048040013643912971, 0.00015916654956527054, 0.00026166660245507956, 0.000138418487040326, 0.00019776856061071157, 0.0001105095143429935, 0.00015563632769044489, 0.00038415024755522609, 4.8565903853159398e-05, 0.00013997482892591506, 0.000333735893946141, 0.00032776859006844461, 0.00011275874567218125, 0.00014873326290398836, 0.00014419908984564245, 0.00013161273091100156, 0.00025717663811519742, 0.00020050656166858971, 0.00021193950669839978, 0.00012235084432177246, 0.00019685213919728994, 9.2482965555973351e-05, 0.00029588566394522786, 0.00013246755406726152, 0.00050360331078991294, 0.00036988459760323167, 0.00012684534885920584, 9.9948825663886964e-05, 5.5821350542828441e-05, 0.0001811983238440007, 0.00025321764405816793, 0.00021935344557277858, 0.00014376908075064421, 0.0002314957237103954, 4.7975230700103566e-05, 0.00013322617451194674, 7.5658317655324936e-05, 0.00048853224143385887, 0.00022043846547603607, 0.00011530036863405257, 0.00033381811226718128, 3.0799477826803923e-05, 0.00015710890875197947, 0.00010421944898553193, 0.00033623233321122825, 0.00029064109548926353, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-71,-11,127,22,71,77,-59,-15,-18,-15,-5,-29,-1,36,1,-10,-45,26,23,18,-127,127,4,-84,8,49,-28,-125,-127,40,24,11,27,62,-17,-31,-9,29,-8,-14,28,-110,69,24,-70,38,47,-17,51,-23,20,3,-6,16,48,-91,-50,-60,-19,-11,1,11,37,66,-25,74,13,-9,15,19,127,22,23,25,-1,-10,18,127,-6,-14,15,-27,20,126,21,-75,-16,-2,-30,-15,-37,2,-26,-15,26, 127,-127,73,106,-42,127,39,-119,69,4,-18,127,127,-100,-13,16,10,127,127,-110,127,-77,81,66,-127,-115,-66,-34,-55,45,-58,-20,-91,53,-127,-85,-43,-14,-54,61,0,127,127,81,-52,-116,-111,-50,-14,-127,44,84,66,-32,44,83,-47,41,-78,-114,-45,-42,-61,67,72,-61,27,30,-82,31,-17,89,115,127,13,19,1,58,-34,52,64,127,127,-23,-9,74,-109,127,-124,-99,5,-127,-89,-127,-38,107, -75,-13,30,-81,15,-27,66,-8,79,-35,-27,17,-19,-6,-9,-13,-9,-17,6,-2,-20,-103,30,-2,-124,98,7,-54,118,48,-14,9,0,15,15,-29,-9,35,18,11,25,11,-119,62,18,-19,38,14,-14,10,-16,5,-10,1,-3,21,-66,6,-33,52,2,40,34,-2,-6,-38,-31,24,9,2,-4,37,9,-26,-6,3,-12,-6,-85,3,-21,-25,-17,3,-110,11,-32,-22,-52,25,-25,-31,30,-27,-14,1, 
  /* [0][1][][] */ -64,-74,72,-35,-47,93,18,127,-52,-21,0,-118,26,-114,78,31,-2,-60,-18,88,49,-71,48,48,-91,-11,127,-22,-23,63,120,-105,-127,89,-87,-56,-36,32,-30,93,-49,-26,-6,45,-48,127,-22,66,16,94,20,-2,14,-55,27,32,127,120,-70,-86,127,-33,-35,127,71,-38,-16,-1,127,38,127,97,-41,102,-5,12,15,14,-32,9,-42,124,-79,110,1,34,-54,30,78,-127,-31,-9,127,-69,-23,0, 68,125,56,-113,127,82,89,39,-127,127,127,-38,-64,-127,-127,127,127,-64,-125,-50,100,94,-121,127,-105,-89,-42,127,-127,108,-127,-127,-88,127,106,127,127,-127,-105,127,-65,-98,113,-127,-127,-37,-127,-127,127,-112,87,42,127,127,127,-127,99,-127,-127,127,20,-81,-127,-101,-127,127,-127,127,-125,-127,-108,-83,-127,-80,127,127,-127,127,-79,127,127,31,-41,-127,60,127,91,46,127,11,127,2,-67,34,127,-127, -53,-13,-50,39,-56,-99,36,-27,18,-33,-28,91,2,94,14,9,-4,65,-7,127,3,-85,-40,6,-69,106,-71,-20,-68,-17,17,-63,-70,37,5,-18,-29,45,-67,40,127,-5,-38,27,-40,-59,17,45,8,116,-11,6,-37,-73,4,20,95,2,2,21,-35,127,94,-53,-43,12,38,-11,-78,122,-19,-85,-1,-55,-17,-21,27,16,77,-36,-70,-42,57,14,-48,-15,73,23,16,63,-43,19,-42,96,-26,-6, 
  /* [0][2][][] */ -66,1,-5,-21,13,-46,66,24,55,-28,-37,-2,19,19,-26,2,-7,66,6,1,-54,-83,3,-9,-27,-52,35,-68,90,38,24,25,16,-9,-11,-46,-6,35,-4,-1,-16,-6,-69,103,5,32,11,37,-15,-32,12,-20,22,-1,8,16,-70,23,-14,13,14,1,-20,-5,-1,-47,-47,15,-33,12,25,30,13,-20,26,3,17,5,-79,-12,-8,-8,17,15,-127,7,13,-43,-59,-49,-27,-49,10,57,-19,-9, 123,33,-127,-34,-71,-26,40,30,-64,-28,-19,-108,-75,113,-13,36,1,-53,-10,-125,88,-51,-38,-1,-106,127,-51,21,-34,-21,-10,-5,-62,14,27,5,-23,-28,127,54,10,-15,69,-34,-37,77,-67,-43,-33,-7,-127,-127,-51,-26,1,40,-64,-8,11,38,-8,-18,10,-48,-54,33,65,-22,115,109,-24,-71,11,-58,2,5,100,4,51,22,13,-95,-49,3,4,9,127,40,-62,39,-18,-107,41,78,-10,25, -53,12,-18,25,15,-69,-127,1,-12,-8,-16,4,15,-25,19,-3,-8,-16,4,17,-45,-73,14,1,20,-92,21,3,-47,-39,-6,16,43,-21,-6,-25,-35,4,41,-41,21,-2,-49,-34,4,66,23,16,-9,-5,10,-9,18,5,-5,-5,-62,-13,4,-38,-11,10,86,-11,34,-3,-2,27,1,5,-4,19,-18,15,-2,15,36,1,74,-11,3,-8,-7,-17,75,1,43,-39,60,40,-16,-54,-7,3,-14,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0052206385880708694, 0.003645729273557663, 0.0045650885440409184, 0.0093475067988038063, 0.0095452051609754562, 0.0071198730729520321, 0.0021720202639698982, 0.0036447169259190559, 0.011762692593038082, 0.0054262001067399979, 0.010607348755002022, 0.0047137206420302391, 0.010778916999697685, 0.0089285131543874741, 0.018508071079850197, 0.0067222160287201405, 0.0082996618002653122, 0.0062665189616382122, 0.0059310188516974449, 0.0032617442775517702, 0.0032709932420402765, 0.0019709302578121424, 0.0055666537955403328, 0.0050478256307542324, 0.0047291936352849007, 0.0041143749840557575, 0.0085036642849445343, 0.0073231044225394726, 0.0031788602937012911, 0.018407830968499184, 0.017013443633913994, 0.009623953141272068, 0.0053080003708600998, 0.0059020235203206539, 0.0088276015594601631, 0.018226910382509232, 0.01559064257889986, 0.0083784544840455055, 0.010360605083405972, 0.0045896805822849274, 0.0097805177792906761, 0.0085178809240460396, 0.01472844835370779, 0.0032267293427139521, 0.015941491350531578, 0.0039733145385980606, 0.0050702020525932312, 0.0089022982865571976, 0.029487801715731621, 0.0044087427668273449, 0.020417004823684692, 0.0067645781673491001, 0.011120830662548542, 0.0058827856555581093, 0.0084051638841629028, 0.0046966541558504105, 0.0066145439632236958, 0.016326384618878365, 0.0020640508737415075, 0.0059489300474524498, 0.014183775521814823, 0.013930165208876133, 0.0047922465018928051, 0.0063211633823812008, 0.0061284611001610756, 0.0055935410782694817, 0.010930007323622704, 0.0085215289145708084, 0.0090074287727475166, 0.0051999110728502274, 0.0083662159740924835, 0.0039305258542299271, 0.012575140222907066, 0.0056298710405826569, 0.02140313945710659, 0.015720095485448837, 0.0053909271955490112, 0.0042478251270949841, 0.002372407354414463, 0.0077009284868836403, 0.010761749930679798, 0.0093225212767720222, 0.0061101857572793961, 0.0098385680466890335, 0.002038947306573391, 0.0056621120311319828, 0.0032154785003513098, 0.020762618631124496, 0.0093686347827315331, 0.0049002654850482941, 0.01418726984411478, 0.0013089777203276753, 0.0066771283745765686, 0.0044293263927102089, 0.014289873652160168, 0.012352246791124344, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2421, 8404, 14617, 39046, 18516, -3694, -1831, 6153, 40326, -4595, 13003, 5156, 12371, 14395, 34866, 1296, 2687, 9427, 18132, 7349, -418, 319, 15669, -1317, 5102, -51, 18250, 7431, 7194, 50466, 56254, 27323, 9002, -925, 10279, 2468, 1810, 4039, 19182, -1122, 13944, 9411, 47691, -3590, 27006, 12623, 7159, 17701, 71136, 14321, -708, 9160, -3563, -189, -2923, 7921, -982, 16842, 7155, 8064, 6053, 17116, 7405, 6452, 12356, 9175, 6221, -7103, 11253, -2411, 5468, 11764, 20646, 7347, -6099, -5892, 9163, 263, 3033, -1739, 24305, 15267, 4876, 18800, 4041, 286, 11652, 63819, 13414, 11219, 5580, -298, 7085, 13437, 4640, 12999, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00016608559235464782, 0.00017295261204708368, 0.00013023689098190516, 5.95439450989943e-05, 0.00016154191689565778, 0.00027163192862644792, 0.00042338934144936502, 0.00026406522374600172, 5.7841014495352283e-05, 0.00030018010875210166, 0.00020617831614799798, 0.00017416433547623456, 0.0001022274955175817, 0.00016246626910287887, 6.8302731961011887e-05, 0.00043267244473099709, 0.00016901307390071452, 0.0001294022222282365, 0.00012324741692282259, 0.0001588280574651435, 0.00024136998399626464, 0.00064863485749810934, 0.00012808846076950431, 0.00049482169561088085, 0.00051097542745992541, 0.00023916865757200867, 0.00012252732994966209, 0.00018917217676062137, 0.00022525731765199453, 7.0117566792760044e-05, 5.0094869948225096e-05, 9.0662826551124454e-05, 0.00018394326616544276, 0.00025559333153069019, 0.00019262690329924226, 0.00023468153085559607, 0.00029342045309022069, 0.00036755218752659857, 0.00014164134336169809, 0.00048402140964753926, 0.00013541242515202612, 0.00016787248023319989, 5.6534016039222479e-05, 0.00029873900348320603, 0.00011987653851974756, 0.00012406866881065071, 0.00024292226589750499, 0.00015156953304540366, 5.7851757446769625e-05, 0.00014547191676683724, 0.00017225602641701698, 0.00018691836157813668, 0.0002966765605378896, 0.00022974504099693149, 0.00035456495243124664, 0.00014027520956005901, 0.00013487848627846688, 0.00010952533921226859, 0.00028598346398212016, 0.00018443206499796361, 0.00026524477289058268, 8.1886333646252751e-05, 0.00019611133029684424, 0.00015528466610703617, 0.00020011015294585377, 0.0002099671692121774, 0.00020652053353842348, 0.00018698190979193896, 0.00015133959823288023, 0.00029204937163740396, 0.00020576328097376972, 0.00013386366481427103, 0.00010147479770239443, 0.00014106738672126085, 0.00025243166601285338, 0.00023174048692453653, 0.00018335669301450253, 0.0003219243953935802, 0.00024794801720418036, 0.00025004206690937281, 8.3704610005952418e-05, 0.00010955479956464842, 0.00017963597201742232, 0.000103643091279082, 0.00028728012694045901, 0.00024233649310190231, 0.0001989793818211183, 6.0520600527524948e-05, 0.00010743653547251597, 0.00019944638188462704, 0.00022430106764659286, 0.00030867545865476131, 0.00020565137674566358, 0.00012063691974617541, 0.0002414515329292044, 0.00013279041741043329, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -3,64,-18,89,38,17,7,-23,38,39,-47,87,-13,-110,28,-127, 
  /* [1][0][][] */ 7,49,-9,-11,31,-40,127,-101,7,92,-6,-13,-1,-41,27,9, 
  /* [2][0][][] */ -127,38,-32,-39,-3,14,71,118,-27,71,99,-25,-71,11,45,-47, 
  /* [3][0][][] */ -45,59,51,46,-64,75,48,127,-1,54,-111,13,51,-77,-73,-58, 
  /* [4][0][][] */ 6,5,35,55,-24,63,-4,34,11,-12,-5,-3,18,4,-127,-15, 
  /* [5][0][][] */ -12,-31,62,-21,10,-27,-6,26,-74,101,-29,-127,-15,25,-64,-28, 
  /* [6][0][][] */ 8,-4,28,-3,34,50,-64,-74,-14,-5,52,-4,127,-18,-9,-32, 
  /* [7][0][][] */ 26,24,127,-8,-26,-48,4,-13,-86,34,-88,-38,7,-15,43,-23, 
  /* [8][0][][] */ 15,34,85,79,-48,92,32,50,44,13,3,-94,-26,9,-127,-86, 
  /* [9][0][][] */ 41,-127,47,39,-5,-17,8,35,127,17,67,17,-21,5,-103,-25, 
  /* [10][0][][] */ -56,-112,14,-29,-121,31,-26,72,96,127,52,-25,-33,69,107,-6, 
  /* [11][0][][] */ 40,-21,8,-87,16,-34,-100,-127,-43,52,-10,-30,28,-31,42,-57, 
  /* [12][0][][] */ -14,21,13,-37,-28,-55,-119,-27,-67,-98,-44,31,23,127,108,40, 
  /* [13][0][][] */ -43,-120,-57,39,13,-69,4,-23,54,9,-17,-13,26,20,127,32, 
  /* [14][0][][] */ -11,-56,69,25,25,35,10,127,17,38,15,-38,18,44,-57,124, 
  /* [15][0][][] */ 16,-31,2,53,14,-8,87,-5,4,-127,18,-33,7,-22,-2,-31, 
  /* [16][0][][] */ 38,-73,-44,34,4,17,40,-72,127,73,87,8,11,111,65,110, 
  /* [17][0][][] */ -94,-45,36,127,103,45,31,-31,122,-36,7,-43,24,34,-94,12, 
  /* [18][0][][] */ -15,2,-13,11,-117,0,-5,33,-58,-11,-11,-56,4,-127,72,7, 
  /* [19][0][][] */ 71,-48,35,-64,103,26,-127,95,105,-61,67,76,-35,66,33,123, 
  /* [20][0][][] */ 32,-15,82,-64,-5,28,-31,65,-5,-49,82,-6,23,22,-47,127, 
  /* [21][0][][] */ -61,-12,-2,-27,12,16,-76,-39,-17,59,-6,9,-127,-11,24,-2, 
  /* [22][0][][] */ 30,-27,21,-25,21,-69,1,-20,-127,20,-15,-45,-18,-5,67,-20, 
  /* [23][0][][] */ 21,12,15,-16,7,16,-10,8,-3,-12,39,-10,127,-6,-2,-34, 
  /* [24][0][][] */ -18,1,3,-53,-23,-13,36,8,-64,1,-16,-127,10,-114,30,5, 
  /* [25][0][][] */ -108,7,-52,3,50,-10,-80,-127,-34,51,-39,-42,-63,-69,9,-70, 
  /* [26][0][][] */ 32,-2,70,-116,127,-21,-7,0,122,-64,47,-29,-10,124,1,79, 
  /* [27][0][][] */ 97,-31,15,-31,-35,-61,-6,-26,-31,19,-127,8,16,-19,-2,38, 
  /* [28][0][][] */ -121,-25,-127,-74,56,-5,83,-47,5,64,-73,6,54,-2,-51,45, 
  /* [29][0][][] */ -50,-22,-10,127,-18,22,20,-32,2,9,-69,35,9,-60,17,-45, 
  /* [30][0][][] */ 71,-3,127,-28,48,30,-42,73,-24,-72,74,-46,-22,23,-68,66, 
  /* [31][0][][] */ 13,-93,-4,-57,1,-67,12,-48,-16,38,109,24,-19,89,74,127, 
  /* [32][0][][] */ -14,70,-36,37,-127,22,-79,-45,-47,-37,0,50,3,55,38,64, 
  /* [33][0][][] */ 23,-22,25,127,15,-5,23,-55,-118,51,68,-24,12,0,12,112, 
  /* [34][0][][] */ 23,-7,2,-9,62,-21,-127,-17,-50,69,-47,19,-15,11,10,22, 
  /* [35][0][][] */ 72,22,-6,-8,26,-127,-37,-16,-34,-11,-81,-2,71,19,-10,22, 
  /* [36][0][][] */ 23,2,-127,7,48,6,-31,19,-29,-16,-3,-12,1,8,-17,7, 
  /* [37][0][][] */ 6,5,127,-2,-51,16,15,-58,-16,22,-36,14,10,-6,12,-11, 
  /* [38][0][][] */ -127,31,-4,26,32,65,7,-29,-2,-23,123,-26,-25,11,-13,-12, 
  /* [39][0][][] */ -11,-11,20,39,33,-12,-127,42,12,34,-6,-34,2,-13,-4,-3, 
  /* [40][0][][] */ -13,69,-35,127,18,22,59,14,-48,-18,-29,38,6,34,-71,-29, 
  /* [41][0][][] */ 22,14,-49,-26,-50,-10,127,104,-48,78,-26,-7,-3,71,47,-6, 
  /* [42][0][][] */ 28,-42,-53,-1,28,14,-68,73,96,-101,127,33,-11,33,-83,25, 
  /* [43][0][][] */ -70,-5,33,-47,35,19,-68,-73,-28,48,-1,-8,-127,-20,47,-2, 
  /* [44][0][][] */ 4,4,-8,-3,-1,-9,-2,-40,127,0,8,47,21,78,-1,47, 
  /* [45][0][][] */ -62,-77,24,-102,52,-2,-28,51,4,-100,-25,-24,32,121,-43,127, 
  /* [46][0][][] */ -38,24,-16,92,-77,-20,4,-71,-127,36,-50,-12,3,29,-5,-43, 
  /* [47][0][][] */ -25,-4,-93,127,-13,51,6,-12,22,59,55,57,-29,-4,12,-23, 
  /* [48][0][][] */ -4,11,10,-127,24,-25,-7,-3,-48,27,11,-1,3,47,117,44, 
  /* [49][0][][] */ -43,19,71,127,-39,48,-60,-27,47,-54,-96,-60,-38,-37,-126,-122, 
  /* [50][0][][] */ 0,78,26,-114,58,9,-6,68,127,-8,-29,16,13,-37,17,-31, 
  /* [51][0][][] */ 14,-30,30,-10,55,0,-57,-127,21,-70,-13,-13,-13,-7,-21,-17, 
  /* [52][0][][] */ 10,10,-14,44,26,-17,-58,89,-73,127,-38,-44,88,97,14,-33, 
  /* [53][0][][] */ -11,97,8,-96,-40,-12,19,-32,-72,-48,-36,56,10,-127,-80,-13, 
  /* [54][0][][] */ -4,5,15,28,44,-19,7,-41,1,31,-12,-23,-10,127,-40,-9, 
  /* [55][0][][] */ -108,127,83,-16,38,1,-12,-8,-45,33,104,-8,-4,-27,120,-17, 
  /* [56][0][][] */ 77,-7,29,-127,106,7,-27,30,74,-56,43,127,-32,31,79,65, 
  /* [57][0][][] */ -29,-9,6,73,-12,12,51,127,1,18,-1,-34,9,58,10,16, 
  /* [58][0][][] */ 21,127,-1,-115,11,39,-1,31,106,-1,-11,88,8,-84,36,67, 
  /* [59][0][][] */ 28,57,44,-103,-43,-10,30,-8,12,30,22,-60,-17,-127,-70,11, 
  /* [60][0][][] */ 47,-11,113,-35,-30,127,29,-33,-6,32,-51,-8,26,6,27,-7, 
  /* [61][0][][] */ -40,10,-60,-56,-49,-5,112,127,-29,93,-19,13,2,90,11,-33, 
  /* [62][0][][] */ -18,-1,0,5,-83,40,-66,22,-37,-13,-17,-44,3,-127,68,-8, 
  /* [63][0][][] */ 1,-38,0,-94,41,-7,-116,-127,-50,95,-11,3,53,-1,30,-31, 
  /* [64][0][][] */ -19,2,41,41,78,-15,-40,-124,35,-127,0,-38,-11,-16,-11,14, 
  /* [65][0][][] */ -127,23,40,-63,15,69,50,-45,-72,31,55,-12,-4,19,-9,-32, 
  /* [66][0][][] */ 58,5,97,3,-43,17,-37,47,-63,-20,62,-78,-8,38,-127,-24, 
  /* [67][0][][] */ 54,-33,-65,77,47,-74,-77,-106,49,-127,-97,-28,-112,6,-79,39, 
  /* [68][0][][] */ 11,-31,-76,45,-59,-88,-13,-74,-44,-34,49,-62,-37,53,127,-8, 
  /* [69][0][][] */ -23,47,-60,59,-1,-127,22,78,18,0,41,-6,121,15,-24,3, 
  /* [70][0][][] */ 16,4,-40,-34,-43,-5,127,95,-17,67,-11,2,3,46,14,-16, 
  /* [71][0][][] */ 15,-15,-23,-60,26,14,12,68,-18,-50,-4,-3,5,-127,66,19, 
  /* [72][0][][] */ 22,19,-16,24,19,-45,-40,-127,12,56,-36,10,49,56,48,56, 
  /* [73][0][][] */ -51,-127,-23,-72,-83,-19,32,-34,-26,7,-41,-30,23,-49,66,2, 
  /* [74][0][][] */ -23,26,66,104,-3,2,-127,109,22,-34,-46,-42,-1,0,-20,2, 
  /* [75][0][][] */ -44,30,-29,14,-32,89,93,127,-9,48,8,-41,-112,78,17,15, 
  /* [76][0][][] */ 5,-33,-61,-31,47,-82,-127,-122,-20,-15,4,-10,57,-10,84,-25, 
  /* [77][0][][] */ -41,3,-42,-27,-53,0,-11,-52,127,10,-63,3,-6,52,31,-79, 
  /* [78][0][][] */ -102,-127,-22,102,90,62,-48,38,7,-82,-122,105,32,-32,95,70, 
  /* [79][0][][] */ 38,-9,30,-69,127,9,60,33,103,33,13,38,2,-12,15,-30, 
  /* [80][0][][] */ -14,-40,72,-124,-16,-55,-2,11,-95,-59,-6,-43,4,127,-22,31, 
  /* [81][0][][] */ 8,-18,38,35,12,49,-22,-9,2,-12,-6,-30,-10,29,-127,20, 
  /* [82][0][][] */ -78,-9,32,-127,0,-33,-18,-42,-11,-48,-58,-113,-33,-105,-119,30, 
  /* [83][0][][] */ 7,24,-34,-81,-61,2,-7,57,-87,-9,10,-78,15,-127,25,59, 
  /* [84][0][][] */ 127,36,19,55,-52,2,-61,29,-11,-23,113,12,-63,13,98,-88, 
  /* [85][0][][] */ -1,-4,34,-51,36,-4,-35,127,-72,-121,-65,-29,-11,99,87,-117, 
  /* [86][0][][] */ 6,-8,5,-2,-69,68,-41,42,-108,-51,45,-15,1,-127,-7,41, 
  /* [87][0][][] */ 127,-36,18,-3,-36,-30,6,-4,12,18,-107,7,42,-2,-2,30, 
  /* [88][0][][] */ 30,80,-23,27,1,-24,-4,-19,127,30,40,29,-44,-27,120,-125, 
  /* [89][0][][] */ 41,68,-78,-12,-30,-11,23,-56,53,47,17,-37,-43,7,-31,-127, 
  /* [90][0][][] */ -22,-38,5,-52,-53,23,127,-45,89,-69,9,-67,36,-5,-43,-7, 
  /* [91][0][][] */ 12,11,-6,-97,-56,14,36,-31,-55,25,60,37,26,-11,17,127, 
  /* [92][0][][] */ 25,11,8,11,47,-23,-79,-127,51,-64,4,-26,-44,-10,-11,-18, 
  /* [93][0][][] */ 72,19,55,-124,-25,2,-34,53,34,-93,84,-11,-25,127,-16,18, 
  /* [94][0][][] */ -94,41,-93,16,55,-127,-13,22,-2,-44,90,-26,2,0,-18,-8, 
  /* [95][0][][] */ -28,38,20,-127,-16,8,-35,4,11,-19,-46,-76,1,37,-62,7, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00059169111773371696, 0.00061615533195436001, 0.00046397768892347813, 0.00021212930732872337, 0.00057550397468730807, 0.00096770701929926872, 0.0015083530452102423, 0.00094075012020766735, 0.00020606251200661063, 0.0010694118682295084, 0.00073452410288155079, 0.00062047218671068549, 0.00036419232492335141, 0.00057879701489582658, 0.00024333306646440178, 0.0015414246590808034, 0.00060212047537788749, 0.00046100415056571364, 0.0004390772373881191, 0.00056583562400192022, 0.00085989682702347636, 0.0023108052555471659, 0.0004563237598631531, 0.0017628356581553817, 0.0018203842919319868, 0.00085205445066094398, 0.00043651188025251031, 0.00067393860081210732, 0.00080249435268342495, 0.00024979855515994132, 0.0001784663472790271, 0.00032299241865985096, 0.00065531028667464852, 0.00091056845849379897, 0.00068624631967395544, 0.0008360687643289566, 0.0010453300783410668, 0.0013094294117763638, 0.00050460681086406112, 0.001724358880892396, 0.00048241586773656309, 0.00059805699856951833, 0.00020140623382758349, 0.0010642778361216187, 0.0004270682402420789, 0.00044200295815244317, 0.00086542690405622125, 0.00053997663781046867, 0.00020610078354366124, 0.00051825348054990172, 0.00061367370653897524, 0.00066590926144272089, 0.0010569301666691899, 0.00081848219269886613, 0.0012631615391001105, 0.00049973989371210337, 0.00048051369958557189, 0.00039019138785079122, 0.0010188353480771184, 0.00065705162705853581, 0.00094495236407965422, 0.00029172556241974235, 0.00069865980185568333, 0.00055321207037195563, 0.00071290589403361082, 0.00074802216840907931, 0.00073574332054704428, 0.00066613563103601336, 0.00053915748139843345, 0.0010404455242678523, 0.00073304551187902689, 0.0004768983053509146, 0.00036151078529655933, 0.00050256203394383192, 0.00089930481044575572, 0.0008255910943262279, 0.00065322057344019413, 0.0011468773009255528, 0.00088333146413788199, 0.00089079164899885654, 0.00029820331837981939, 0.0003902963362634182, 0.00063996523385867476, 0.00036923549487255514, 0.001023454824462533, 0.00086334004299715161, 0.00070887745823711157, 0.00021560871391557157, 0.00038274988764896989, 0.00071054114960134029, 0.00079908763291314244, 0.0010996770579367876, 0.00073264684760943055, 0.0004297771374695003, 0.00086018734145909548, 0.00047307478962466121, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -6926, -1343, -9014, 30467, 26010, 3771, -2452, -2774, 21633, 1980, 28328, 20074, -9967, 12326, 37735, -28264, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00041477257036603987, 0.00023135550145525485, 0.00024951889645308256, 0.00020973465871065855, 0.0003653672756627202, 0.00031481764744967222, 0.00032378130708821118, 0.00037257300573401153, 0.00022807884670328349, 0.0002666108775883913, 0.0003915361303370446, 0.00062370742671191692, 0.00043560552876442671, 0.00042422208935022354, 0.00044063548557460308, 0.00030558696016669273, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -5,13,-8,20,54,74,-32,-25,49,7,20,10,-4,14,30,72,3,-4,-2,0,106,-63,12,-17,-23,-31,-38,-94,-14,-1,42,48,124,-7,2,-3,14,-16,-28,15,-30,17,21,-34,9,-35,-12,28,-6,16,6,-3,-31,-8,4,-1,35,30,-19,-29,-60,35,-8,-13,23,14,53,-2,12,4,4,-27,-65,-3,1,4,-1,-97,14,-17,41,-16,-57,-45,34,-10,-2,26,-11,-1,21,-36,28,26,-7,127, 
  /* [1][0][][] */ 76,-96,36,79,-17,-61,-23,-51,-32,-102,-13,22,14,-51,-39,-57,-77,-12,38,24,-48,-103,-58,19,127,-73,-79,3,-23,92,-23,49,-2,8,-42,32,-25,-17,54,-42,1,-90,73,-47,-69,23,49,-2,30,32,-7,-79,52,-82,56,-37,31,22,-26,-120,43,-84,27,-54,9,-85,41,36,43,54,-39,3,-95,33,-22,68,27,99,8,-31,38,-6,-86,29,-87,60,-2,61,-44,18,5,19,16,-49,45,8, 
  /* [2][0][][] */ 23,13,14,-22,4,-2,-6,28,66,-10,16,70,3,2,45,8,-3,-7,21,-6,-15,-68,12,-57,-8,-9,-20,22,-9,24,127,-60,22,-76,-20,53,20,110,-46,-29,7,-18,0,27,-47,-52,-52,18,30,24,-32,-26,32,-1,-9,-32,-27,4,-5,25,9,7,80,89,-2,-70,13,-74,-15,-11,-8,2,-22,7,-28,17,16,49,11,24,18,85,30,-8,-13,12,13,11,24,12,-2,-48,-48,9,-17,54, 
  /* [3][0][][] */ -12,-25,-43,44,27,-13,-10,-25,-13,12,6,10,8,-20,48,-2,42,-43,30,14,-15,-7,-9,1,-16,15,14,-5,21,-45,63,-27,17,-21,-17,44,-11,-10,-17,5,15,-71,30,-32,-12,-1,5,-1,-127,40,-12,31,-125,-52,-22,-41,27,11,-13,57,-2,21,10,18,-9,-90,-40,20,62,15,-7,21,-40,13,-3,-45,-51,-58,25,-36,11,-25,24,73,41,57,34,16,33,-17,-16,10,-26,4,-18,-26, 
  /* [4][0][][] */ 3,-28,8,-67,6,-14,-51,6,-18,-44,-28,-11,8,63,14,9,51,-11,4,4,-6,22,58,1,-6,-1,22,17,-1,-12,3,-5,-37,11,0,10,40,-27,-4,-12,10,2,-95,-27,29,-17,-1,-21,3,73,-13,-11,-17,-17,10,-10,-2,-26,25,39,6,-1,1,-7,33,-109,21,-22,-48,18,-17,-1,-9,18,-16,35,-21,55,59,8,7,4,127,-40,34,-21,-13,-5,69,6,-4,18,-30,25,-6,-41, 
  /* [5][0][][] */ -7,-2,-12,-10,1,3,-2,127,48,-19,-17,-36,-13,29,36,20,-23,-19,5,-42,-56,-6,-11,-56,17,4,26,71,75,5,67,48,-58,16,-2,-5,-59,-62,-30,-19,-46,-25,-15,-6,66,20,5,16,7,14,-27,5,-40,-12,11,-10,-18,-21,-4,25,-62,15,-27,-45,9,10,-20,11,-6,16,-1,-1,40,10,15,1,-14,31,3,124,-4,-51,19,27,-1,-9,23,-39,5,-35,12,-126,-25,-27,-6,-110, 
  /* [6][0][][] */ -29,-7,-15,-51,-1,-17,-14,7,-4,24,-11,2,40,-68,10,-14,-4,-58,29,16,6,-2,-14,13,71,-5,3,3,12,-6,17,-16,-20,-3,-21,-1,22,-1,14,31,3,-23,-46,-16,0,-26,23,-127,26,27,20,13,13,-4,-11,-38,27,-2,0,4,20,23,9,9,29,56,19,-25,-27,-7,15,-20,12,8,41,-2,-34,18,6,8,-15,2,48,-30,1,46,14,-14,25,11,-33,-1,-29,13,-14,6, 
  /* [7][0][][] */ 11,8,29,-27,-10,3,-1,-25,-10,-12,-17,-18,-12,-95,31,1,-9,-41,-9,-5,9,-17,-38,-5,-21,-6,4,-23,5,10,4,0,-15,4,-8,-14,2,-10,-35,24,6,-15,-22,31,-8,19,-13,78,-3,29,-12,-30,-33,9,1,-50,45,-3,-3,-4,-3,3,-12,-10,-20,39,15,-32,-18,-9,7,43,-7,-13,-15,7,50,7,-4,-21,-1,-42,34,-4,-34,127,-4,-1,-31,-31,-7,18,-20,-5,-4,3, 
  /* [8][0][][] */ -65,34,-55,-8,45,-12,-21,38,6,74,-39,3,9,36,77,-26,-11,25,-74,13,16,26,-39,1,-29,-28,16,2,56,-100,-8,-8,27,4,16,-4,-23,29,-36,59,1,15,4,-127,-44,1,35,-26,-46,27,4,62,-104,73,15,5,10,-20,-31,-23,-6,-41,1,14,-32,27,31,-13,-12,-5,25,79,-12,34,36,37,3,-91,-2,-42,-17,-24,15,4,-59,-1,16,-48,5,26,-24,4,36,-21,-16,-7, 
  /* [9][0][][] */ 20,-58,-29,-41,11,19,-23,27,22,-18,-5,10,-52,-19,2,17,-8,-4,46,-26,-28,12,-34,-38,35,10,25,-20,-30,-36,-26,-1,-4,17,16,40,4,52,-36,18,8,7,-23,-98,7,-6,29,-127,-41,4,-3,22,-19,14,-11,3,-45,22,-13,12,16,15,8,28,35,123,43,51,15,-17,13,-22,-8,-5,-40,2,70,2,10,6,-13,-1,9,-45,4,20,-1,-5,-54,30,-39,-4,14,3,10,-15, 
  /* [10][0][][] */ 20,46,-15,39,69,-108,-9,-33,9,54,29,-3,-9,17,16,-70,20,42,-25,39,-77,-17,-6,-32,-66,-22,-48,51,8,15,8,33,-5,-20,33,-18,76,-22,-9,-2,-10,65,47,-22,-47,-16,-35,8,-17,-26,-37,2,-5,-13,4,-10,5,32,-15,-11,3,14,-10,25,1,36,50,21,21,3,27,49,-56,-21,-62,-4,3,20,-12,14,30,2,-57,-23,59,-43,95,-5,-16,19,32,-14,69,38,-16,-127, 
  /* [11][0][][] */ 50,39,-35,24,0,13,50,12,-3,-19,-21,-12,-1,2,41,-1,-7,-12,-99,-5,5,18,5,-7,-39,-23,-8,3,4,12,-3,-7,-2,10,9,21,10,14,-6,24,5,29,64,-98,34,-40,0,-9,-127,9,13,-43,25,22,-6,15,-18,-10,7,4,10,-14,-11,9,-48,51,-19,15,19,-5,23,9,-48,-23,19,34,-1,-32,-49,3,13,1,95,49,11,-12,-14,-8,4,17,-15,-1,2,9,-21,18, 
  /* [12][0][][] */ -32,2,12,-4,-29,28,12,4,127,1,-13,2,-4,10,-40,-43,23,23,11,74,58,33,-12,-16,1,11,14,-28,-104,8,25,-31,12,-4,-12,-16,25,2,44,-14,-48,-22,-2,16,3,34,7,0,17,10,-39,6,6,0,6,-11,73,-31,7,13,25,-15,9,-7,0,37,-37,-2,3,3,-18,-31,21,7,-75,-1,30,1,14,-66,-17,9,39,36,-13,-9,-34,-28,2,15,-7,42,-9,-27,10,3, 
  /* [13][0][][] */ 26,-13,-23,29,29,-5,10,-5,-3,6,11,0,11,-12,13,-9,17,-64,-34,11,-6,-24,14,1,7,13,2,1,-13,-29,-1,13,2,2,5,39,17,-4,6,19,2,13,21,34,21,13,-7,-127,23,-7,7,9,-9,-6,13,9,-15,19,26,15,4,22,-3,4,-13,-20,-20,-51,-1,17,-9,-32,-15,36,-9,22,-21,-4,18,2,28,-5,-11,20,12,30,10,22,-3,3,27,-4,-6,16,-15,-13, 
  /* [14][0][][] */ -119,-50,38,49,25,-30,-33,6,-15,8,-11,11,65,12,-127,0,73,-11,-16,29,-16,-9,33,22,-112,12,27,-11,-46,-78,-34,0,6,2,28,-67,25,38,-2,21,19,36,-8,-37,21,126,70,57,-118,50,8,31,-52,-15,32,-2,2,16,68,68,35,61,8,49,-7,-21,-46,53,3,74,-51,-82,-80,-5,-5,38,-15,39,78,3,66,22,29,26,47,8,50,32,26,48,78,0,-10,29,22,-28, 
  /* [15][0][][] */ 83,-21,51,11,3,72,42,-30,-6,60,13,9,-84,-16,-12,42,13,52,41,-11,18,14,-81,60,20,14,51,8,18,44,-60,-72,19,-50,47,-2,49,-31,-48,-104,3,37,4,36,12,47,-25,-36,108,-49,-51,29,55,-127,61,-105,-4,-60,28,23,-117,12,24,24,70,-18,-59,38,-37,78,-23,33,36,21,8,13,22,-53,73,-10,-10,13,48,90,-18,6,-2,-49,-11,5,82,-8,-67,59,21,-22, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017627833411097527, 0.0098326085135340691, 0.010604552924633026, 0.0089137228205800056, 0.015528108924627304, 0.013379749841988087, 0.013760705478489399, 0.015834352001547813, 0.0096933506429195404, 0.011330962181091309, 0.016640285030007362, 0.026507565751671791, 0.018513234332203865, 0.018029438331723213, 0.018727008253335953, 0.012987446039915085, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11111, -9803, 3005, 56895, -1748, -4349, -10994, 2593, -2867, 1263, 2594, -1453, 1697, -6095, 6060, -7065, -1487, 17313, 23824, 2483, 1552, -2781, 824, -309, 16718, -1454, -606, -3491, -6132, -7300, 7185, -9282, 184, -1374, -1145, 15687, 1005, -4262, 19999, 937, -174, 1737, -9647, -7409, -7784, 67948, 40, 19803, 28630, -12338, -324, 8275, 7339, -290, -5367, 2577, -11983, 1857, 1871, -6500, -1475, -1165, -12466, -1079, 1285, 17891, 28469, 21890, -12268, 185, -7328, -969, 47375, 10173, 186, 750, 19316, 31803, -119, -6222, -2000, -4617, 1075, -3238, 330, 141, 1656, 279, 1264, -2669, -259, -554, -21, -355, 172, 51955, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00016824195336084813, 0.00011707880184985697, 0.00021548382937908173, 3.8183690776349977e-05, 0.00016445650544483215, 0.00015769517631269991, 0.00030927933403290808, 8.7443135271314532e-05, 0.00010795504931593314, 0.00036358469515107572, 0.00016034602595027536, 0.00032855462632142007, 9.8621982033364475e-05, 0.0004010240372736007, 0.00016864131612237543, 0.00010310865036444739, 0.000101963356428314, 0.00031474360730499029, 6.6410611907485873e-05, 0.00024052223307080567, 5.0956292398041114e-05, 0.00018402934074401855, 0.00013275598757900298, 0.0003807494358625263, 0.00021186540834605694, 0.00022326131875161082, 0.00012776484072674066, 0.00016090268036350608, 0.00013529245916288346, 0.00011498467210913077, 0.00013246839807834476, 0.00015886776964180171, 0.00012795945804100484, 0.00012892192171420902, 0.00018890561477746814, 0.00015311184688471258, 0.00036366883432492614, 0.00010831510735442862, 4.7172536142170429e-05, 0.00013690323976334184, 0.00024866405874490738, 0.00032105800346471369, 0.0003434688551351428, 0.00018162348715122789, 0.00018130717216990888, 5.6789489462971687e-05, 0.00022565880499314517, 0.00016720566782169044, 9.0588328021112829e-05, 0.00020354006846901029, 0.00020108454918954521, 0.00015420334239024669, 0.00025234682834707201, 0.00025735943927429616, 0.00027280027279630303, 0.00040720254764892161, 0.0003443676105234772, 0.00018197901954408735, 0.0001078055938705802, 8.6115338490344584e-05, 0.00027844874421134591, 0.00014072564954403788, 0.00028639697120524943, 0.00013014239084441215, 0.00018417592218611389, 0.00016037166642490774, 8.8159198639914393e-05, 7.9185170761775225e-05, 0.00030968291684985161, 0.00021507911151275039, 0.00021944154286757112, 0.00012132694246247411, 0.00012210423301439732, 0.00014679688320029527, 0.00014334061415866017, 0.00023313018027693033, 0.00055024411994963884, 5.1898379751946777e-05, 0.00028776170802302659, 0.00029937716317363083, 0.00015151592378970236, 0.00044060972868464887, 0.00010664773435564712, 0.00015684070240240544, 0.00012808581232093275, 9.7223288321401924e-05, 0.00012799304386135191, 0.00017549037875141948, 0.00019925252126995474, 0.00010628891322994605, 0.00018026061297859997, 0.00011085553705925122, 0.00014213933900464326, 0.00042340281652286649, 0.007004124578088522, 7.3800772952381521e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,6,-20,105,-16,23,-63,-54,16,-7,100,-9,4,-8,-5,54,5,16,-34,3,73,2,32,-32,2,17,43,49,20,12,24,48,-6,27,10,-15,6,49,-60,-26,20,9,28,17,-85,-55,25,-5,-11,-20,-8,-6,49,5,-9,1,-3,-36,29,-32,27,-1,127,27,-13,-11,11,-54,66,36,1,-8,78,-31,68,5,16,-127,30,65,1,16,127,-14,38,29,-28,-20,36,-7,-13,81,2,19,-2,12, -49,13,-8,10,52,-8,-10,-127,38,14,-127,-5,-17,-12,4,90,19,-30,-16,-15,75,-97,127,26,-62,-31,-105,-16,27,35,-49,18,121,12,-13,-1,-23,127,-66,-127,9,-18,-31,13,46,-127,127,-45,-76,50,48,7,38,-64,31,55,37,43,-102,85,127,35,4,-20,42,-38,-96,-1,38,-30,-20,45,-50,-48,104,-3,-31,-59,-31,63,-66,64,-15,9,-10,48,55,-40,-27,53,-12,72,-127,-30,24,-127, 0,-4,-23,-74,8,19,38,21,-3,-1,6,63,1,-12,-11,6,-12,16,-17,16,6,24,23,-32,1,-31,9,12,-7,5,45,-79,44,17,10,-23,13,3,-32,-21,7,3,-16,8,23,-31,21,1,7,-8,5,-5,4,5,-6,8,-7,44,7,-2,10,-17,3,-16,-26,-18,30,-52,-106,-7,39,-17,-127,-22,-11,17,10,-10,7,11,-12,24,-36,-4,-39,21,25,35,-24,-18,25,-12,18,7,-2,-46, 
  /* [0][1][][] */ -41,58,-18,38,-85,-16,-11,-43,25,94,-45,-21,-30,-24,-7,63,127,-24,-88,-13,58,-127,-29,16,-35,-47,-127,-6,37,35,-49,28,-127,-75,-56,3,66,-2,-52,46,-20,87,1,-3,34,-52,-12,-32,127,43,-4,20,44,9,-37,-18,31,10,-124,127,-37,-87,20,127,-59,-36,-85,127,-37,127,-19,52,-36,-54,35,9,-36,-70,127,49,127,37,6,-2,127,29,-97,46,-37,-36,-101,40,96,102,28,-59, 127,127,127,127,-46,-127,127,24,127,-127,16,-127,-108,127,127,127,-16,-127,-60,-127,127,23,-68,127,127,127,-55,-127,127,127,-127,127,-11,-127,-123,127,-127,-44,96,110,-127,-127,127,127,127,-119,-106,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,41,-106,-27,-69,-67,127,127,-71,127,127,-106,-127,127,-42,127,-127,-127,-127,125,-76,127,-42,127,80,127,-37,-127,-26,-106,-127,-127,-22,-127,-23,-127,-127,117, -24,66,-38,2,127,71,-21,49,4,24,-13,-4,-26,-31,-14,-7,-104,-22,-127,38,30,78,-13,-116,-34,-41,124,71,10,35,72,8,127,-48,127,-4,56,5,-93,14,36,24,-24,1,-23,-53,-12,-42,81,14,-11,39,-6,-4,-76,-14,24,19,127,-89,1,127,0,-35,-110,-28,-75,101,14,-17,110,25,-18,-55,12,47,-29,-6,-43,-2,-46,9,48,24,-88,34,127,-47,33,-23,127,-11,-113,34,34,19, 
  /* [0][2][][] */ -4,-40,-21,-61,-4,15,39,31,-2,9,-20,52,24,-34,-7,5,42,2,12,21,-10,29,-17,-25,2,-24,9,3,-10,-7,49,-75,-38,66,-27,-25,31,-34,-63,16,9,10,-34,19,14,-79,-12,-1,-9,6,16,-8,7,1,-22,5,-1,44,-48,35,-5,-12,4,17,-5,-10,24,-53,-57,11,-22,-13,-120,-31,-1,18,14,-11,56,19,23,22,-40,15,12,25,-21,9,5,24,22,-6,19,40,-7,-29, -28,-10,-27,24,-44,75,-25,66,5,-6,54,-12,127,-8,-18,-17,-1,-40,-56,23,-22,79,-46,-111,-47,-47,100,70,13,42,54,-2,-126,63,-14,-23,-28,-27,-127,-4,44,-13,-15,36,-25,-46,-17,-48,-60,27,69,24,-12,-81,31,51,18,26,76,-56,20,-56,-9,1,19,-26,-127,-55,-11,-27,-64,23,36,-47,-29,-7,-45,24,-57,2,49,35,19,11,6,62,-94,127,17,125,-31,-19,113,-22,47,83, -10,-34,-26,29,12,65,-44,12,3,-6,0,14,12,-51,-10,-13,-43,-7,17,19,-25,4,-21,4,-3,19,-2,51,-2,-6,33,30,19,42,19,-23,-5,-26,-29,7,11,-11,21,10,-73,-33,-13,4,-2,-17,-1,-4,-9,8,-18,-5,-1,-50,13,-30,-22,50,10,-28,-10,-2,37,-56,44,7,51,-20,30,-55,-18,23,10,12,-5,23,-29,32,89,-14,-17,54,38,-9,111,11,3,-20,8,-22,-6,-51, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0071502826176583767, 0.0049758488312363625, 0.0091580627486109734, 0.0016228067688643932, 0.0069894012995064259, 0.0067020449787378311, 0.013144371099770069, 0.003716333070769906, 0.0045880894176661968, 0.015452349558472633, 0.0068147061392664909, 0.013963570818305016, 0.0041914340108633041, 0.017043521627783775, 0.0071672559715807438, 0.0043821176514029503, 0.0043334425427019596, 0.013376602903008461, 0.002822450827807188, 0.010222194716334343, 0.0021656423341482878, 0.0078212469816207886, 0.0056421291083097458, 0.016181850805878639, 0.0090042799711227417, 0.0094886058941483498, 0.0054300054907798767, 0.0068383635953068733, 0.0057499296963214874, 0.0048868483863770962, 0.0056299068965017796, 0.0067518800497055054, 0.0054382765665650368, 0.0054791816510260105, 0.0080284886062145233, 0.0065072532743215561, 0.015455924905836582, 0.0046033919788897038, 0.0020048327278345823, 0.0058183874934911728, 0.010568222030997276, 0.01364496536552906, 0.014597426168620586, 0.0077189980074763298, 0.0077055543661117554, 0.0024135531857609749, 0.0095904991030693054, 0.007106240838766098, 0.0038500039372593164, 0.0086504528298974037, 0.0085460934787988663, 0.0065536419861018658, 0.010724740102887154, 0.010937775485217571, 0.011594011448323727, 0.017306108027696609, 0.014635623432695866, 0.0077341082505881786, 0.0045817377977073193, 0.003659901674836874, 0.011834071949124336, 0.0059808399528264999, 0.012171871028840542, 0.0055310511961579323, 0.0078274765983223915, 0.006815795786678791, 0.003746765898540616, 0.0033653697464615107, 0.013161523267626762, 0.0091408621519804001, 0.0093262651935219765, 0.0051563950255513191, 0.0051894299685955048, 0.0062388675287365913, 0.0060919760726392269, 0.0099080326035618782, 0.023385373875498772, 0.0022056810557842255, 0.012229871936142445, 0.012723528780043125, 0.00643942691385746, 0.018725913017988205, 0.0045325285755097866, 0.0066657299175858498, 0.0054436470381915569, 0.0041319895535707474, 0.0054397042840719223, 0.0074583408422768116, 0.0084682321175932884, 0.0045172786340117455, 0.007661075796931982, 0.0047113602049648762, 0.006040921900421381, 0.017994619905948639, 0.29767528176307678, 0.0031365328468382359, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 16402, 1657, 6984, -985, 5387, 5521, 22337, 7804, -1540, 16226, 10504, 2273, 7942, 42038, -457, -2558, 10955, 14081, 2565, -191, -922, 17093, 4877, 4285, 10394, 6832, 4909, 4600, 53, -37, 7217, 14171, 17357, 2391, 9392, -718, 22516, 10170, 692, 6173, 1084, 17985, 18471, 6017, 3763, 12170, 19353, 5675, 6598, 3791, 411, -921, 24365, 8140, 11475, 19270, -306, 7065, 3888, 4246, 13552, 6481, 3284, 9736, 8082, 5982, 7867, -958, 24242, 9104, 14888, -1606, -1981, 3361, 2233, 4249, 23105, 15197, 16949, -3134, 8195, -6317, -2840, 793, 8075, 6416, 6923, 4620, 14546, 5457, 10218, 4420, 17825, 22771, -10727, 17354, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0001572481996845454, 0.00020245391351636499, 0.00019419699674472213, 0.00057667924556881189, 0.00029968793387524784, 0.00016507286636624485, 0.00013997004134580493, 0.00045215079444460571, 0.000299462815746665, 0.0001099534347304143, 0.00013694027438759804, 0.00036586486385203898, 0.00034912140108644962, 0.00011535702651599422, 0.00022332834487315267, 0.000270855613052845, 0.00020106502051930875, 0.00016706212772987783, 0.00017018640937749296, 0.00060797733021900058, 0.00030204819631762803, 0.00014579434355255216, 0.0003115463478025049, 0.00018045172328129411, 0.00017066214059013873, 0.00030580061138607562, 0.00029278130386956036, 0.00019416218856349587, 0.00050683505833148956, 0.00029426248511299491, 0.00019574807083699852, 0.0001315981789957732, 0.00011244029155932367, 0.00045186825445853174, 0.00017800787463784218, 0.00041632252396084368, 9.9837554444093257e-05, 0.00026047075516544282, 0.00065033853752538562, 0.00015539336891379207, 0.00046006919001229107, 0.0001060328067978844, 0.00011512875062180683, 0.00012592665734700859, 0.000294310855679214, 0.00026736469590105116, 0.0001480820938013494, 0.00025732000358402729, 0.00023935784702189267, 0.00023421514197252691, 0.00036723323864862323, 0.00072811188874766231, 0.00011031707981601357, 0.00019759743008762598, 0.000203985910047777, 9.6102288807742298e-05, 0.00033712093136273324, 0.00024634672445245087, 0.00020067037257831544, 0.00038738892180845141, 0.00012551610416267067, 0.0002120480639860034, 0.00031409991788677871, 0.00028231443138793111, 0.00012994097778573632, 0.00019064899242948741, 0.00024615609436295927, 0.00033788679866120219, 0.00011173543316544965, 0.00012393461656756699, 0.00013521996152121574, 0.00030297337798401713, 0.00019562069792300463, 0.00038350382237695158, 0.00019835314014926553, 0.00029796521994285285, 0.00010315247345715761, 0.00029586916207335889, 9.8239615908823907e-05, 0.00038592936471104622, 0.00013037137978244573, 0.00032972314511425793, 0.00013703021977562457, 0.00032988822204060853, 0.00019692810019478202, 0.00024455646052956581, 0.00023520550166722387, 0.00029575236840173602, 0.00011500213440740481, 0.00029402403743006289, 0.0001334023691015318, 0.00038380004116334021, 0.00011934291251236573, 0.00012026436888845637, 0.00027241988573223352, 0.00018930764053948224, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 48,-31,127,89,72,-22,16,-40,106,-28,-58,-71,32,77,-40,-69, 
  /* [1][0][][] */ 28,72,-15,-1,75,-7,16,22,45,73,-23,127,-2,-32,84,-81, 
  /* [2][0][][] */ 16,-55,6,4,-60,26,-59,81,-86,-88,0,92,-8,-127,69,-89, 
  /* [3][0][][] */ 115,117,-14,34,-127,-27,-65,-35,3,-5,118,-75,-70,90,-42,-37, 
  /* [4][0][][] */ -1,-1,25,15,-26,35,-14,39,-68,-32,-8,1,-3,-127,23,-7, 
  /* [5][0][][] */ 127,-36,-15,5,-10,-105,-17,24,-5,17,-120,-2,22,-11,-9,28, 
  /* [6][0][][] */ -127,-84,-22,121,-50,5,-54,26,-124,-80,-70,-33,18,72,-8,99, 
  /* [7][0][][] */ -19,25,-73,52,49,-127,-28,31,4,-36,8,-2,-2,6,-41,8, 
  /* [8][0][][] */ 36,-54,-18,-14,2,30,-67,-61,-20,11,-80,5,-127,6,-3,31, 
  /* [9][0][][] */ 29,-40,68,110,0,7,-10,-76,127,-89,6,-39,-12,51,-63,23, 
  /* [10][0][][] */ -127,-101,-22,-40,123,69,36,63,111,-81,-103,59,104,-97,-112,85, 
  /* [11][0][][] */ 38,-15,-127,16,42,18,-17,40,-12,-27,-8,-8,1,25,-43,12, 
  /* [12][0][][] */ 101,-44,0,-6,-9,-60,-67,-34,29,-13,-127,-25,-53,-25,1,64, 
  /* [13][0][][] */ 41,-58,15,-76,63,18,-75,-127,22,-72,22,-17,22,-30,32,14, 
  /* [14][0][][] */ -58,29,-92,-50,80,-114,63,-58,69,54,-5,-109,31,127,-17,29, 
  /* [15][0][][] */ 31,1,56,35,44,-50,-44,1,29,-67,-80,-2,-127,-47,-19,66, 
  /* [16][0][][] */ -121,63,1,19,3,82,50,75,-15,41,127,2,-7,-7,21,-59, 
  /* [17][0][][] */ -16,-16,-46,-38,-35,5,43,72,-16,127,-16,6,-7,90,71,-2, 
  /* [18][0][][] */ -4,120,-66,-2,-2,8,73,-71,28,127,-50,105,9,-45,43,-94, 
  /* [19][0][][] */ 3,-18,36,18,1,44,-4,17,16,9,-35,-7,-127,6,-8,29, 
  /* [20][0][][] */ 90,-67,-16,-97,-37,28,30,-88,-53,28,-127,-47,34,8,63,11, 
  /* [21][0][][] */ 44,-19,127,50,-16,60,29,1,-5,27,-23,-6,-8,87,-3,-8, 
  /* [22][0][][] */ 38,20,21,0,-4,7,23,127,2,-10,6,38,-2,28,13,25, 
  /* [23][0][][] */ -24,13,-82,25,22,-127,10,44,4,-21,-6,3,-67,9,-6,30, 
  /* [24][0][][] */ 42,-59,7,-64,52,-10,-31,-15,32,30,65,90,-47,80,127,42, 
  /* [25][0][][] */ -127,-86,-47,10,10,10,15,-28,-59,9,-87,14,30,29,33,50, 
  /* [26][0][][] */ 11,7,51,4,-7,9,-29,61,-74,-58,1,7,5,-127,43,-22, 
  /* [27][0][][] */ -99,45,-45,34,35,-27,2,26,31,-27,127,30,-21,2,-16,-29, 
  /* [28][0][][] */ -17,-7,19,34,-1,-1,10,81,28,13,-21,-2,-127,-9,-12,39, 
  /* [29][0][][] */ -15,62,37,-36,32,-15,21,-25,-127,34,-30,2,3,28,-82,12, 
  /* [30][0][][] */ -4,-14,-127,-27,32,-56,-10,20,-19,-11,-15,-10,-35,-30,10,16, 
  /* [31][0][][] */ 127,-43,-107,12,38,-2,-56,73,-15,-16,-88,-50,22,5,-90,33, 
  /* [32][0][][] */ -127,48,32,50,25,88,24,30,29,2,118,6,-23,13,-8,-29, 
  /* [33][0][][] */ 4,-21,127,-23,-67,20,5,-43,-6,10,-8,21,-3,17,44,23, 
  /* [34][0][][] */ -5,-10,-44,-116,24,-2,-2,-26,-38,-58,-21,-127,-22,9,37,12, 
  /* [35][0][][] */ -3,-34,49,42,54,-26,11,-26,-113,29,-8,18,-26,127,-40,-44, 
  /* [36][0][][] */ -113,55,-35,4,-32,33,57,107,3,51,127,-19,1,30,8,-21, 
  /* [37][0][][] */ -42,5,127,-27,-69,-68,20,-38,18,23,1,1,1,-58,59,8, 
  /* [38][0][][] */ 8,-17,-11,20,26,-46,-53,4,-9,-15,69,-17,127,30,-8,11, 
  /* [39][0][][] */ -44,-24,-32,-42,-73,-103,80,127,-29,-1,19,-67,1,69,82,64, 
  /* [40][0][][] */ 65,-12,-18,-18,-9,83,-19,2,8,-9,15,-4,127,15,-31,-14, 
  /* [41][0][][] */ -7,0,-29,-127,36,-26,-40,-83,-13,-67,21,-37,-16,-8,-29,27, 
  /* [42][0][][] */ 59,53,-3,104,-127,-13,-105,-10,-91,-60,94,-103,-60,123,-43,-4, 
  /* [43][0][][] */ 14,108,-26,127,14,33,42,-80,-45,86,-8,22,17,-48,52,39, 
  /* [44][0][][] */ -4,-23,-127,26,48,68,-41,56,-10,-15,33,-22,11,-26,-54,-2, 
  /* [45][0][][] */ 0,12,-15,-127,-28,-8,45,-11,-10,15,-21,-1,5,-75,43,-24, 
  /* [46][0][][] */ 11,19,65,-26,8,13,-55,47,11,-51,-22,15,2,127,46,-11, 
  /* [47][0][][] */ 17,-17,19,-47,-44,13,-69,55,-16,-36,19,26,7,-127,39,18, 
  /* [48][0][][] */ 3,-10,16,-127,-9,-21,-11,2,12,-26,20,-18,9,52,-8,54, 
  /* [49][0][][] */ 25,-31,-4,122,96,10,7,46,-61,18,44,40,-15,40,127,-13, 
  /* [50][0][][] */ -28,-10,56,-31,2,127,-43,-81,27,-28,111,32,92,-14,-2,-49, 
  /* [51][0][][] */ 32,45,5,5,13,-7,-42,27,54,5,5,127,16,36,38,-47, 
  /* [52][0][][] */ -34,71,127,13,7,-42,24,-48,-22,17,25,31,-1,108,-127,-15, 
  /* [53][0][][] */ -5,-14,-51,-127,-55,11,26,-27,-10,45,10,-11,14,-18,54,13, 
  /* [54][0][][] */ 21,-1,-41,-65,33,-3,-20,14,54,-33,-1,-31,-21,127,18,43, 
  /* [55][0][][] */ -16,-26,-40,-21,7,-61,-13,-127,-2,-89,-1,-1,-20,-80,-38,-8, 
  /* [56][0][][] */ 47,46,32,55,9,-28,9,127,22,-32,-3,-32,78,-12,-52,39, 
  /* [57][0][][] */ 88,-7,127,-36,-54,-49,-13,-32,10,1,-85,11,42,-41,36,15, 
  /* [58][0][][] */ 97,95,6,106,-127,-20,1,39,-8,18,95,-39,-67,-48,-12,-90, 
  /* [59][0][][] */ 127,-43,-6,0,-27,-15,-12,5,-18,11,-117,-19,5,-1,9,28, 
  /* [60][0][][] */ -127,26,-7,-5,23,14,14,32,5,6,91,4,-30,-6,9,-10, 
  /* [61][0][][] */ -115,62,13,37,11,-3,-46,-65,127,-69,85,-25,60,-45,-109,-71, 
  /* [62][0][][] */ -27,-33,-127,60,59,82,-2,82,26,-49,49,-23,-73,3,-97,-6, 
  /* [63][0][][] */ -37,14,127,-47,-59,-64,28,-28,0,11,6,10,-21,-46,68,13, 
  /* [64][0][][] */ 18,64,3,33,66,-4,98,-115,-21,102,10,-8,-11,-127,-1,54, 
  /* [65][0][][] */ 8,23,-2,-31,72,3,-6,-127,-29,-60,-29,-48,-15,-41,40,24, 
  /* [66][0][][] */ -127,2,-22,15,-34,20,10,-40,-81,-37,-88,58,56,15,42,80, 
  /* [67][0][][] */ 1,-39,9,127,12,-6,-33,38,49,17,2,-9,-13,-34,-92,-22, 
  /* [68][0][][] */ -1,-1,-17,127,-61,-27,3,-38,-55,25,26,-35,-38,-58,-27,-63, 
  /* [69][0][][] */ 71,90,8,127,42,-12,63,-127,26,99,18,44,7,-35,32,-13, 
  /* [70][0][][] */ 16,-28,17,-127,127,-36,57,13,92,-42,94,-84,23,111,104,124, 
  /* [71][0][][] */ 14,41,9,91,41,-127,-31,104,45,-86,11,17,18,-47,-60,33, 
  /* [72][0][][] */ -127,-72,-19,54,11,29,-21,17,-41,-24,-82,29,53,19,7,83, 
  /* [73][0][][] */ -22,-8,-3,51,14,-16,-4,-6,74,1,-2,11,31,127,-58,-34, 
  /* [74][0][][] */ 82,-57,14,-36,-51,-15,55,-21,-54,-5,-127,19,-121,-23,48,60, 
  /* [75][0][][] */ -20,-16,-20,127,-35,16,9,-16,-69,24,-19,-24,5,-50,-13,-28, 
  /* [76][0][][] */ -7,-18,-12,45,27,19,-14,-127,22,-109,10,16,-17,-19,37,-34, 
  /* [77][0][][] */ 127,-29,39,52,-46,5,-36,-13,44,-4,-45,57,40,7,-48,39, 
  /* [78][0][][] */ -5,-4,48,-7,3,-26,-82,29,50,-30,-36,-49,1,127,34,-36, 
  /* [79][0][][] */ -2,18,52,14,46,64,-53,-49,17,-52,71,-12,127,-19,-29,-40, 
  /* [80][0][][] */ -127,-100,-83,127,-4,57,38,-1,-66,35,-95,-2,67,-66,-1,49, 
  /* [81][0][][] */ 69,18,-81,40,127,99,-18,-22,-3,-98,-15,-78,-25,-16,-111,35, 
  /* [82][0][][] */ 116,127,4,30,-113,-12,-74,-12,-73,-4,105,-48,-45,98,-6,-29, 
  /* [83][0][][] */ 127,37,8,-24,9,-11,-8,30,36,18,75,-29,-47,-27,-26,-72, 
  /* [84][0][][] */ 3,-65,-60,-25,55,27,-8,-127,-21,-62,18,22,-20,5,-3,-9, 
  /* [85][0][][] */ -20,-9,-32,-46,0,4,78,101,-4,127,-11,-38,40,76,60,-28, 
  /* [86][0][][] */ 90,-19,9,4,5,-26,-10,-23,3,2,-127,14,18,16,-16,22, 
  /* [87][0][][] */ -17,30,16,-44,-18,76,-33,59,-15,-35,28,15,6,-127,8,8, 
  /* [88][0][][] */ -9,-29,-115,-61,75,-7,-52,-127,-4,-49,-22,-19,-49,0,17,-8, 
  /* [89][0][][] */ 19,-12,19,-127,21,1,-40,126,95,-69,33,4,-6,39,34,53, 
  /* [90][0][][] */ -22,26,-46,51,87,-22,124,-112,83,127,-35,33,10,9,-13,-38, 
  /* [91][0][][] */ 33,-15,-36,-15,1,-127,-13,-8,-7,-4,-37,-1,33,-15,8,28, 
  /* [92][0][][] */ 24,-1,127,52,31,17,-8,56,-32,16,-73,12,32,103,-7,4, 
  /* [93][0][][] */ 127,-30,-39,-17,-44,-57,13,49,-25,51,-116,-10,-4,30,-12,51, 
  /* [94][0][][] */ 20,-22,43,75,106,-30,-16,56,6,-15,-7,54,-4,127,-26,-72, 
  /* [95][0][][] */ -124,42,46,40,27,48,14,0,9,-1,127,6,-27,30,-16,-34, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00061002298025414348, 0.00078539235983043909, 0.0007533608004450798, 0.0022371485829353333, 0.0011625984916463494, 0.00064037769334390759, 0.00054299470502883196, 0.0017540573608130217, 0.0011617251439020038, 0.0004265493480488658, 0.00053124112309888005, 0.0014193229144439101, 0.00135436886921525, 0.00044751184759661555, 0.00086637184722349048, 0.0010507474653422832, 0.00078000430949032307, 0.00064809474861249328, 0.00066021498059853911, 0.0023585651069879532, 0.0011717547895386815, 0.00056558928918093443, 0.0012086016358807683, 0.00070003786822780967, 0.00066206051269546151, 0.0011863118270412087, 0.0011358051560819149, 0.00075322575867176056, 0.0019661975093185902, 0.0011415511835366488, 0.00075937795918434858, 0.0005105172167532146, 0.00043619677308015525, 0.0017529613105580211, 0.00069055729545652866, 0.0016150664305314422, 0.00038730617961846292, 0.0010104607790708542, 0.0025228997692465782, 0.00060282740741968155, 0.0017847757553681731, 0.00041133983177132905, 0.00044662630534730852, 0.00048851530300453305, 0.0011417388450354338, 0.0010372048709541559, 0.00057446426944807172, 0.00099823786877095699, 0.00092855613911524415, 0.00090860569616779685, 0.0014246313367038965, 0.002824610797688365, 0.00042796006891876459, 0.0007665522862225771, 0.00079133553663268685, 0.00037281573168002069, 0.0013078147312626243, 0.00095566856907680631, 0.00077847333159297705, 0.0015028225025162101, 0.0004869225958827883, 0.00082261156057938933, 0.0012185077648609877, 0.0010952003067359328, 0.00050408829702064395, 0.00073959678411483765, 0.00095492898253723979, 0.0013107857666909695, 0.00043346238089725375, 0.00048078745021484792, 0.00052456738194450736, 0.0011753438739106059, 0.00075888383435085416, 0.001487750792875886, 0.00076948397327214479, 0.0011559154372662306, 0.00040016596904024482, 0.0011477840598672628, 0.00038110720925033092, 0.0014971604105085135, 0.00050575798377394676, 0.0012791160261258483, 0.00053159007802605629, 0.0012797564268112183, 0.00076395570067688823, 0.00094872346380725503, 0.00091244769282639027, 0.0011473309714347124, 0.00044613509089685977, 0.0011406261473894119, 0.00051751628052443266, 0.0014888999285176396, 0.00046297456719912589, 0.00046654921607114375, 0.0010568158468231559, 0.0007343931938521564, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -35093, 2590, 5387, -6892, 1652, -8011, -9917, -43437, 914, 22019, 34622, -10305, -3743, -21490, 42292, -41450, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00069207872729748487, 0.00081685301847755909, 0.001259675482288003, 0.0010459687327966094, 0.0007899185293354094, 0.00091649848036468029, 0.0011467462172731757, 0.00060704932548105717, 0.00061428494518622756, 0.00058431777870282531, 0.00086711894255131483, 0.00055406283354386687, 0.000996066490188241, 0.0012631447752937675, 0.00046407023910433054, 0.00060523801948875189, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -12,-7,-19,13,24,-6,2,99,-46,12,37,-3,21,-21,-10,18,17,-8,-4,0,65,-8,24,127,-17,83,-9,-17,30,-18,26,-21,-20,54,15,-42,14,47,14,-10,-101,-28,21,45,36,30,-119,-54, 
  /* [1][0][][] */ -43,-14,21,9,-38,15,-1,63,-62,-31,10,-49,-20,-13,-6,-7,-24,122,-16,14,4,4,-29,-21,23,-41,18,31,-27,-91,-41,19,-17,-8,29,-7,-1,-46,6,16,-24,-29,127,8,9,-1,22,-13, 
  /* [2][0][][] */ -18,-9,-16,-38,-2,-67,5,-24,2,10,13,24,17,12,-12,6,-3,-18,-22,-11,-2,-3,-1,-127,-14,70,-17,2,1,-20,0,-4,-10,57,9,2,20,14,23,0,-41,0,-19,-3,0,-6,17,9, 
  /* [3][0][][] */ -7,35,1,-32,-2,1,4,-5,-20,-5,2,37,-127,6,-5,-3,0,8,-18,0,-31,7,8,14,-7,-12,4,23,-11,19,4,17,3,1,16,20,-11,28,42,7,9,3,26,-31,6,-4,5,17, 
  /* [4][0][][] */ 37,-30,7,11,17,25,26,-23,-29,3,-13,-21,3,12,0,19,19,-5,-80,5,-8,13,14,74,0,-25,6,48,10,-74,19,8,12,-34,29,-127,9,37,-1,18,-18,18,10,-25,-12,-22,9,6, 
  /* [5][0][][] */ 27,0,-17,56,-2,-6,9,28,-2,-1,42,6,6,53,-2,1,-24,22,27,3,8,6,2,-25,-1,-48,3,-17,-1,-10,0,4,67,-127,-1,28,-11,-16,17,7,-90,59,16,-7,-9,-4,-101,-11, 
  /* [6][0][][] */ 26,-2,5,4,-11,-2,3,-15,-1,4,-1,6,-19,6,5,4,-1,-13,127,8,8,8,17,-36,4,1,24,-13,-11,-2,-4,8,0,-14,31,-35,-2,-41,68,11,-1,-8,-4,8,-11,2,9,-9, 
  /* [7][0][][] */ -46,-15,-8,33,-8,75,-4,49,-4,34,-6,127,80,-2,-8,-3,-8,-21,-10,-19,-31,-9,-22,71,-2,-34,-52,-28,-10,-16,-16,-8,0,3,-25,3,13,-64,99,-6,24,24,-63,-64,19,-14,2,-1, 
  /* [8][0][][] */ -52,-47,-3,8,-6,4,-1,35,-3,-66,6,46,49,9,8,8,-15,61,-30,5,-48,20,-7,-9,1,4,6,47,-6,119,-12,21,-2,2,-20,-127,-113,65,35,24,19,-1,106,-26,5,28,17,26, 
  /* [9][0][][] */ -27,7,-3,28,18,-29,-1,2,55,-37,14,54,-56,9,14,2,-7,16,-38,-23,48,8,-15,-20,2,14,49,-21,8,8,8,-5,0,16,72,-103,-7,-127,-89,10,-33,27,50,5,1,6,-18,-42, 
  /* [10][0][][] */ -19,-11,-35,-127,47,88,7,-16,1,31,20,11,51,-52,-30,23,37,-44,58,-31,35,-22,42,55,-48,-115,5,-37,50,34,49,-43,-33,-82,29,-3,14,-39,4,-35,-32,-67,-9,15,18,19,19,-31, 
  /* [11][0][][] */ -1,51,-2,65,38,-61,-79,-20,5,55,-14,5,-11,50,-1,-79,16,44,9,-8,-50,-106,11,7,13,-39,23,-16,55,-33,25,-79,48,-21,-35,-91,85,23,6,-127,-1,68,99,-71,-8,-51,31,25, 
  /* [12][0][][] */ 127,-3,-17,15,2,17,8,101,19,-10,-58,-25,0,16,-10,0,-11,7,-4,-2,3,1,0,21,0,18,-2,5,-5,10,-5,3,6,-69,-10,9,-14,-17,-29,0,-15,-76,6,-126,-53,-14,76,-2, 
  /* [13][0][][] */ 12,2,-3,7,9,-10,2,-1,2,5,4,23,-4,2,7,1,6,1,12,3,14,-12,9,-4,1,-1,16,127,12,-2,8,-2,4,0,-39,22,7,-3,4,-15,-13,-5,2,7,0,-1,-7,-10, 
  /* [14][0][][] */ 70,-25,52,-76,58,34,35,-106,-57,-60,-10,127,-81,-8,71,9,60,19,-58,66,22,19,72,-21,27,57,-31,-121,26,-35,64,47,-6,72,-127,-52,-40,50,91,6,-34,6,59,3,5,2,16,-26, 
  /* [15][0][][] */ -1,-53,-69,-30,60,21,68,-55,-6,17,-23,-33,82,17,-93,64,61,49,80,-85,-95,-27,59,-7,-95,39,24,50,57,48,51,-42,19,61,98,127,-24,-103,-14,-38,99,56,118,-45,2,-30,-13,70, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.029413346201181412, 0.034716252237558365, 0.053536206483840942, 0.044453669339418411, 0.033571537584066391, 0.03895118460059166, 0.048736713826656342, 0.025799596682190895, 0.02610711008310318, 0.024833505973219872, 0.036852553486824036, 0.023547669872641563, 0.042332824319601059, 0.053683653473854065, 0.019722985103726387, 0.025722615420818329, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2908, 40270, -1132, 35198, 4541, 128310, -3506, 53525, 2729, 30050, 25346, 1409, 1259, 27938, -1475, -1175, -471, 1320, 1180, -2379, 919, -3025, -524, -21332, -4396, 43396, 127675, 93740, 2621, 2149, -1784, 617, 22349, 1290, 39773, -1568, 54100, -763, 50778, 3086, 101, 63800, 511, 3911, 52422, -463, 3246, 46657, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.9902732977643609e-05, 3.3565884223207831e-05, 0.00018953534890897572, 6.1313548940233886e-05, 0.00013765355106443167, 6.437542469939217e-05, 0.00015103309124242514, 0.00010641912376740947, 8.4655490354634821e-05, 3.7768611946376041e-05, 5.8449350035516545e-05, 9.9182536359876394e-05, 4.1557988879503682e-05, 4.3719704990508035e-05, 0.00014971707423683256, 0.00020294795103836805, 0.00018048458150587976, 6.7887500335928053e-05, 0.00012844862067140639, 0.00014311380800791085, 8.2807724538724869e-05, 0.00019886851077899337, 0.00010653759818524122, 0.000151376923895441, 0.00011150906357215717, 9.9491953733377159e-05, 3.2966934668365866e-05, 7.8550488979090005e-05, 0.00012404503650031984, 0.00011720404290826991, 0.00010949594434350729, 0.00014761503553017974, 5.1173985411878675e-05, 0.00014237358118407428, 2.8484850190579891e-05, 5.8356054069008678e-05, 0.00010603823466226459, 0.00011118202382931486, 0.00011267497757216915, 0.00011263375927228481, 0.00012434288510121405, 9.0381858171895146e-05, 8.3606784755829722e-05, 8.6655170889571309e-05, 3.6655314033851027e-05, 0.00014021643437445164, 9.5651201263535768e-05, 3.2351217669202015e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-93,98,70,54,-33,106,-64,59,-89,-79,47,51,-42,-71,-90,100,78,49,78,66,-75,-83,51,-32,-40,-63,-64,-67,62,-63,-114,-14,42,68,63,-64,52,-50,-23,50,-74,58,61,-94,11,76,-34, 80,-97,127,86,-77,-67,-57,-85,96,-103,-63,73,79,-108,-94,92,-38,96,82,127,84,-117,53,72,-51,-76,-68,-81,55,79,-31,-127,-86,78,81,83,-80,82,-82,-16,76,-95,83,89,-74,-127,94,-104, 34,-47,69,37,18,-41,-47,-39,42,-31,6,34,29,-78,-54,-1,-53,37,35,69,33,-55,32,25,-27,-45,-44,-23,31,31,87,-89,-86,43,35,34,-28,38,-37,-11,41,-40,35,42,-6,-9,37,-74, 
  /* [0][1][][] */ 92,-113,-42,93,56,-82,127,-89,87,-113,-72,81,84,-109,-13,-127,127,107,74,-39,83,108,-127,73,73,-75,-92,-99,-127,86,-70,-9,-89,71,106,96,-85,78,-80,89,84,-102,87,90,-89,108,93,-92, 127,-127,-66,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-21,97,-65,127,127,-50,127,127,69,127,127,-127,-127,-127,54,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-78,-34,65,37,-62,-48,-63,56,-41,-59,57,48,-53,-17,11,-63,52,58,-30,57,64,51,64,65,-64,-62,-43,36,55,127,14,-62,68,48,49,-48,59,-58,56,60,-57,54,62,-61,-68,59,-58, 
  /* [0][2][][] */ 45,-51,-47,49,27,-53,64,-42,41,-71,-4,39,56,-72,83,-79,73,50,35,-31,26,-11,-77,29,-24,-43,-48,-48,-74,32,-42,89,-74,37,48,42,-26,37,-42,-88,47,-50,40,45,-23,15,40,-75, 72,-74,-49,80,-56,-64,-71,-67,52,-75,-66,61,75,-48,127,33,-46,59,62,-44,54,-19,42,66,-49,-65,-78,-60,32,62,-24,117,-55,64,57,58,-49,61,-66,-106,68,-68,60,62,-85,50,63,-52, 41,-40,-27,45,28,-21,-17,-34,14,-24,-52,28,32,4,67,25,-36,22,29,-33,28,-1,39,40,-25,-28,-48,-23,34,33,61,66,2,34,15,22,-22,29,-28,-56,28,-32,25,29,-63,8,31,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0033958661369979382, 0.0014265499776229262, 0.0080552520230412483, 0.002605825662612915, 0.0058502759784460068, 0.0027359556406736374, 0.0064189061522483826, 0.0045228125527501106, 0.0035978583618998528, 0.0016051660059019923, 0.0024840973783284426, 0.0042152577079832554, 0.0017662144964560866, 0.0018580874893814325, 0.00636297557502985, 0.0086252875626087189, 0.0076705948449671268, 0.0028852187097072601, 0.0054590660147368908, 0.0060823364183306694, 0.003519328311085701, 0.0084519116207957268, 0.0045278477482497692, 0.0064335190691053867, 0.0047391350381076336, 0.0042284079827368259, 0.0014010947197675705, 0.0033383956179022789, 0.0052719139494001865, 0.0049811718054115772, 0.0046535776928067207, 0.0062736389227211475, 0.0021748943254351616, 0.0060508772730827332, 0.0012106060748919845, 0.0024801322724670172, 0.0045066247694194317, 0.0047252359800040722, 0.0047886865213513374, 0.0047869347035884857, 0.0052845724858343601, 0.0038412287831306458, 0.0035532882902771235, 0.0036828445736318827, 0.0015578507445752621, 0.0059591983444988728, 0.0040651760064065456, 0.0013749267673119903, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 733, 1028, 2597, 637, 10841, 21263, 2710, -27, -860, -708, 1364, 1046, 3603, 1224, 30031, 3273, 2298, -1466, -280, 3866, -2076, 12860, 10648, 10424, 6023, 353, 3717, 4058, 11061, -584, 9816, 6393, 651, -311, 5824, 3444, -1896, 289, -953, 5777, 1348, -682, -1130, 45, 1212, 3428, 889, 1145, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00032075596391223371, 0.00069674773840233684, 0.0002228415833087638, 0.00026551494374871254, 0.00020240609592292458, 0.00019078909826930612, 0.00040589514537714422, 0.00022542238002642989, 0.0003279533120803535, 0.00064311915775761008, 0.00075788836693391204, 0.00025971746072173119, 0.00034834886901080608, 0.00061489827930927277, 0.00012038685235893354, 0.00038126806612126529, 0.00022436412109527737, 0.00028119602939113975, 0.00023058950318954885, 0.00024138575827237219, 0.00029783355421386659, 0.00020111596677452326, 0.00034499369212426245, 0.00014813875895924866, 0.00026527768932282925, 0.0002524418814573437, 0.0018756178906187415, 0.00045856513315811753, 0.0001589662570040673, 0.00038980785757303238, 0.00026346984668634832, 0.0001864547812147066, 0.00059862498892471194, 0.00021165389625821263, 0.00063322362257167697, 0.00052697834325954318, 0.00072279706364497542, 0.0003067527140956372, 0.00019286939641460776, 0.00032142511918209493, 0.00014138018013909459, 0.00021289548021741211, 0.00026492393226362765, 0.0002419911470497027, 0.0016079297056421638, 0.0004054038436152041, 0.00025720699341036379, 0.0010082701919600368, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-2,0,73,-36,45,23,-33, 
  /* [1][0][][] */ 27,71,42,20,12,-38,104,127, 
  /* [2][0][][] */ -36,0,-2,3,-127,-17,16,7, 
  /* [3][0][][] */ 95,4,-8,-118,-127,14,34,-20, 
  /* [4][0][][] */ -127,54,-18,-16,84,-16,43,21, 
  /* [5][0][][] */ -109,-25,16,-8,-127,5,13,92, 
  /* [6][0][][] */ -16,-127,31,-21,15,7,-7,30, 
  /* [7][0][][] */ -61,-8,0,94,127,-27,-40,1, 
  /* [8][0][][] */ 71,-1,3,-127,-4,-18,-43,-38, 
  /* [9][0][][] */ 1,-127,-1,-9,-3,86,-56,76, 
  /* [10][0][][] */ -94,-12,3,17,-127,79,55,-21, 
  /* [11][0][][] */ 120,4,36,17,-54,-42,-35,-127, 
  /* [12][0][][] */ -3,10,37,-3,9,-68,127,64, 
  /* [13][0][][] */ 62,-34,-11,-15,116,127,109,-41, 
  /* [14][0][][] */ 127,61,-6,18,-107,-8,-41,-31, 
  /* [15][0][][] */ -17,-127,15,-9,10,9,6,33, 
  /* [16][0][][] */ -44,-7,8,-6,-127,-6,19,5, 
  /* [17][0][][] */ -19,104,-104,2,5,-127,108,-84, 
  /* [18][0][][] */ 127,-32,-46,11,-53,30,6,93, 
  /* [19][0][][] */ 127,-53,-28,-4,45,-3,39,13, 
  /* [20][0][][] */ 127,19,-18,114,-5,32,0,-55, 
  /* [21][0][][] */ 16,31,-64,7,-26,88,-127,-92, 
  /* [22][0][][] */ -127,23,16,4,-21,-2,-44,-19, 
  /* [23][0][][] */ -35,-53,6,18,-127,60,73,-17, 
  /* [24][0][][] */ 127,-4,-4,-10,-92,-8,-2,4, 
  /* [25][0][][] */ 27,-14,4,-21,127,54,53,-34, 
  /* [26][0][][] */ 5,-97,7,-39,-2,-127,79,-49, 
  /* [27][0][][] */ -16,-127,27,-15,-5,-54,31,-8, 
  /* [28][0][][] */ -126,29,-32,27,-10,-18,127,94, 
  /* [29][0][][] */ -9,41,15,3,-4,42,-100,-127, 
  /* [30][0][][] */ 127,-36,-5,3,-75,5,-46,-20, 
  /* [31][0][][] */ -10,-22,74,-26,13,-119,127,68, 
  /* [32][0][][] */ -80,18,5,1,-127,-90,-106,51, 
  /* [33][0][][] */ -24,9,-3,26,-127,-59,-49,21, 
  /* [34][0][][] */ 6,-127,52,-7,-6,84,-71,65, 
  /* [35][0][][] */ -27,-51,-127,-7,0,-67,45,-52, 
  /* [36][0][][] */ 9,127,54,10,-15,6,-16,-34, 
  /* [37][0][][] */ -127,37,39,-23,56,-34,-9,-114, 
  /* [38][0][][] */ -127,-17,-46,-15,40,26,42,117, 
  /* [39][0][][] */ 5,-45,67,-5,12,-78,127,103, 
  /* [40][0][][] */ -29,-20,-11,-44,-127,115,109,-37, 
  /* [41][0][][] */ -127,42,9,-70,-81,-87,-87,49, 
  /* [42][0][][] */ -36,-127,-92,-9,-13,72,-120,-89, 
  /* [43][0][][] */ -66,6,-18,-127,107,63,68,1, 
  /* [44][0][][] */ 127,-13,17,-94,25,-28,-16,39, 
  /* [45][0][][] */ -15,-127,-15,-5,-12,-76,77,8, 
  /* [46][0][][] */ 112,-9,-6,-24,127,-33,-34,1, 
  /* [47][0][][] */ 127,-4,-5,111,-4,22,18,-41, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00067123526241630316, 0.0014580606948584318, 0.0004663331201300025, 0.00055563420755788684, 0.00042356844642199576, 0.00039925795863382518, 0.00084940314991399646, 0.00047173385974019766, 0.00068629690213128924, 0.0013458338798955083, 0.0015860076528042555, 0.00054350204300135374, 0.0007289780187420547, 0.0012867769692093134, 0.00025192953762598336, 0.0007978669018484652, 0.00046951929107308388, 0.00058844953309744596, 0.00048254692228510976, 0.00050513987662270665, 0.00062326632905751467, 0.00042086865869350731, 0.00072195671964436769, 0.00031000500894151628, 0.00055513775441795588, 0.00052827666513621807, 0.0039250426925718784, 0.00095962389605119824, 0.00033266335958614945, 0.00081573781790211797, 0.00055135454749688506, 0.00039018766256049275, 0.0012527224607765675, 0.00044292100938037038, 0.0013251258060336113, 0.001102789887227118, 0.0015125732170417905, 0.00064193113939836621, 0.00040361133869737387, 0.00067263556411489844, 0.00029586156597360969, 0.00044551925384439528, 0.00055439741117879748, 0.00050640676636248827, 0.0033648605458438396, 0.00084837502799928188, 0.00053824845235794783, 0.0021099732257425785, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -45125, 22962, -11400, -14226, 16421, -4113, 32567, 41323, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0004241983697284013, 0.00076038821134716272, 0.0014361426001414657, 0.0015871961368247867, 0.00084109336603432894, 0.00066818506456911564, 0.00074846332427114248, 0.0010349050862714648, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -52,-8,-32,21,5,-23,6,9,-114,127,-35,125,121,5,75,-13,-7,-35,7,8,-2,-1,-18,-37,23,-100,8,63,-8,16,25,-31,1,-77,121,19,-5,0,-3,-13,114,-10,45,-22,-34,31,-13,-15, 
  /* [1][0][][] */ 2,36,127,8,-1,-22,0,-77,30,-1,23,3,-15,9,-4,-111,12,-54,5,0,-22,28,25,-34,-14,-7,13,-5,11,-4,14,-1,-1,8,20,16,-7,-28,60,-50,11,31,-9,26,-14,11,20,3, 
  /* [2][0][][] */ 3,-50,14,-43,31,26,-6,-30,4,-1,-3,14,-12,54,3,-3,-34,127,-22,-31,-18,22,-39,-8,117,1,1,-6,-30,-10,2,-39,-7,-11,-1,8,-10,-4,-14,6,15,-17,-20,-1,5,23,-25,-41, 
  /* [3][0][][] */ 2,-83,0,10,5,-3,-9,1,-5,-11,14,21,15,-8,51,1,-6,-21,0,20,-3,16,-20,1,8,50,-2,4,-6,5,127,2,14,4,0,2,-19,-12,-8,16,-8,1,-7,28,-9,3,-3,36, 
  /* [4][0][][] */ -95,10,4,5,0,-35,-4,10,39,-34,20,-14,-33,0,-14,-11,0,10,-1,28,10,-24,16,0,-7,43,4,113,4,7,-5,-27,2,-127,-28,10,1,-2,3,3,-50,-10,-11,18,-57,5,8,7, 
  /* [5][0][][] */ -24,24,22,3,-47,6,-7,41,19,6,10,5,-1,-43,7,36,0,-79,16,-1,38,-46,5,44,10,7,-76,-39,-44,-37,17,-7,-5,-71,-1,-57,69,14,-38,11,22,-43,3,5,127,-10,-41,-7, 
  /* [6][0][][] */ -31,-29,-20,-10,32,-31,0,-21,-12,-3,28,-16,-15,34,0,-55,-3,1,3,-22,-39,52,-10,-75,-3,-13,-50,-60,25,46,-19,1,2,-55,-22,59,-66,-54,11,-61,-16,15,17,36,127,-33,39,8, 
  /* [7][0][][] */ 13,33,-67,27,-23,15,6,58,-4,-4,63,-33,7,-33,-9,-1,-20,-127,34,-40,58,35,18,-57,16,-18,16,1,-17,28,-13,6,4,33,0,-19,-14,-47,-39,-60,-12,-30,35,60,-32,-17,-9,1, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.018028430640697479, 0.032316498458385468, 0.061036057770252228, 0.06745583564043045, 0.035746466368436813, 0.02839786559343338, 0.031809691339731216, 0.043983463197946548, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52276, -267, 8865, -227, 5549, -5801, 1979, 22451, 1416, 36893, -2517, 29041, -6684, -1189, 27251, 3488, 117, 17659, 29010, 11339, -117, -346, -423, 13344, -8255, 30376, 45247, 35916, 3209, 772, -1362, 1497, 1100, 19304, -6881, 14605, -11259, 21002, -22742, 129827, 24893, 19099, 12234, -1828, 15110, 3597, 1447, -60, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030804442940279841, 0.000257641397183761, 0.00018375538638792932, 0.00019443809287622571, 0.00013113340537529439, 9.7314288723282516e-05, 0.00057757640024647117, 0.00015330490714404732, 0.00012817855167668313, 0.00013281415158417076, 7.954479951877147e-05, 0.00014790057321079075, 0.00026849433197639883, 0.00016052207502070814, 9.1218447778373957e-05, 0.00043455275590531528, 0.00017570376803632826, 0.00022157262719701976, 7.767919305479154e-05, 0.00015456424443982542, 0.00019922704086638987, 0.00018541714234743267, 0.00015706893464084715, 0.00015530406381003559, 0.00016145560948643833, 0.00011911393812624738, 0.00064597389427945018, 9.233274613507092e-05, 0.00018395179358776659, 0.0010827818186953664, 0.00010809521336341277, 0.00016156861966010183, 0.00080463301856070757, 0.00015152058040257543, 0.00018860358977690339, 0.00016875244909897447, 0.00034485806827433407, 0.00012437213445082307, 0.00027117473655380309, 1.9798364519374445e-05, 0.00012981524923816323, 5.7556499086786062e-05, 0.00013259331171866506, 0.00012648268602788448, 0.00015853899822104722, 0.00010019068577094004, 0.00018674250168260187, 9.5526818768121302e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,109,4,81,-1,28,15,8,10,8,-8,-9,-44,8,-2,8,-22,-112,-6,-22,127,-10,-3,6,-5,9,-4,5,16,100,20,29,38,-28,1,34,-1,2,18,-67,-9,-8,16,3,-7,-10, 127,10,15,-127,28,87,11,11,124,127,8,44,-50,-24,6,8,127,-56,-59,-55,-99,25,-108,15,17,70,-31,-84,24,21,10,-125,6,-62,127,10,-40,-47,-7,117,-78,-98,-30,3,-35,-8,-127,23, -32,-3,7,15,-1,65,4,17,27,8,-13,32,-14,-3,16,4,-103,29,-3,78,-30,-12,-17,-6,-5,-59,-3,29,-16,5,4,-22,8,-24,17,-19,0,47,41,-13,50,38,-15,12,-44,3,-1,-5, 
  /* [0][1][][] */ 126,7,1,-98,14,-26,35,-16,9,9,-12,54,-6,-1,19,-32,0,-49,-59,-85,11,-74,-123,-18,4,98,-14,-127,-8,32,12,-108,17,-53,-2,127,-2,58,-41,40,-61,-127,39,-87,-45,-14,-13,-4, 26,-127,-127,114,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,29,-127,-127,93,127,-127,127,-28,-41,127,-127,127,127,127,-80,127,127,127,-122,101,107, 54,5,49,-13,6,-61,44,19,-24,15,-104,-7,0,-41,127,5,63,-65,-71,84,14,-45,12,-33,1,6,-38,69,21,39,1,2,32,-45,9,66,-5,64,69,-11,-80,9,-85,-31,27,-17,-10,6, 
  /* [0][2][][] */ -54,-6,26,-16,7,35,-37,23,8,-23,12,33,7,-6,-37,18,5,22,-13,105,7,-32,-15,-12,-4,22,0,51,-9,3,47,-32,-18,-44,-32,-39,-1,31,9,-23,10,-4,42,-36,-37,18,-11,17, 68,126,76,21,17,-20,124,35,18,-3,43,27,-5,-1,-89,25,-58,-56,-36,122,-36,49,12,19,31,-63,-40,30,77,1,127,21,85,-27,7,-35,-25,-17,-12,118,-27,-12,-41,45,20,-33,7,-127, -42,-4,7,-3,5,-5,-61,8,-19,-10,-40,-39,20,-9,-8,12,33,24,-8,-127,24,-10,5,-9,-7,10,-10,-54,-15,8,6,7,-20,86,-37,-23,-4,36,26,-62,5,9,-38,7,-44,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013091888278722763, 0.010949759744107723, 0.0078096035867929459, 0.0082636186853051186, 0.0055731693282723427, 0.0041358573362231255, 0.024546997621655464, 0.0065154582262039185, 0.0054475883953273296, 0.0056446013040840626, 0.0033806539140641689, 0.0062857745215296745, 0.011411009356379509, 0.0068221879191696644, 0.0038767838850617409, 0.018468491733074188, 0.0074674100615084171, 0.0094168363139033318, 0.0033013655338436365, 0.0065689804032444954, 0.0084671489894390106, 0.0078802285715937614, 0.00667542964220047, 0.0066004227846860886, 0.0068618631921708584, 0.0050623421557247639, 0.027453890070319176, 0.003924141637980938, 0.0078179510310292244, 0.046018227934837341, 0.0045940466225147247, 0.0068666660226881504, 0.034196902066469193, 0.0064396248199045658, 0.0080156521871685982, 0.0071719791740179062, 0.014656467363238335, 0.0052858158014714718, 0.01152492593973875, 0.00084143050480633974, 0.0055171479471027851, 0.0024461511056870222, 0.0056352154351770878, 0.0053755142726004124, 0.0067379074171185493, 0.0042581041343510151, 0.0079365558922290802, 0.0040598898194730282, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 68742, 7899, 5169, 7532, 1502, 11009, -1897, -301, 978, 2319, 3598, 252, 1773, -860, 770, -2198, 4181, 10605, -277, 27005, 3950, 2868, 8367, -586, 3603, 4736, 24822, 10493, -82, -2804, 101, 2295, -2219, 9531, 2761, 8526, 7340, 4050, 24196, 2055, -1047, 2948, 1183, 3621, 4492, 2313, -1386, 2771, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.3006089476402849e-05, 0.00028900979668833315, 0.00029232105589471757, 0.00042543176095932722, 0.0014875001506879926, 0.00045743104419670999, 0.0010139879304915667, 0.0010273710358887911, 0.00057408190332353115, 0.00059188873274251819, 0.00061993062263354659, 0.00053096329793334007, 0.00054914632346481085, 0.00054164597531780601, 0.00054008408915251493, 0.0016619024099782109, 0.0003877849958371371, 0.00040202203672379255, 0.0019131188746541739, 9.9652970675379038e-05, 0.00029925213311798871, 0.00034167259582318366, 0.00047339734737761319, 0.00090532272588461637, 0.00034032593248412013, 0.00024592623231001198, 0.00016289878112729639, 0.00035018924972973764, 0.00095193542074412107, 0.00092509132809937, 0.00052695325575768948, 0.00036280346103012562, 0.00089382182341068983, 0.00022862870537210256, 0.00037472753319889307, 0.00022005816572345793, 0.00049931497778743505, 0.00032971770269796252, 9.7617732535582036e-05, 0.0022059399634599686, 0.00056291784858331084, 0.00092500046594068408, 0.00040821681614033878, 0.00040506053483113647, 0.00026977181551046669, 0.00048013997729867697, 0.0008437180076725781, 0.00095744518330320716, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 91,35,-6,-3,127,29,-60,-32, 
  /* [1][0][][] */ -6,-10,-3,127,8,-11,2,23, 
  /* [2][0][][] */ 27,-127,-17,34,-1,-66,72,14, 
  /* [3][0][][] */ 127,-33,-2,15,-5,-31,23,11, 
  /* [4][0][][] */ 3,-46,127,-7,-5,-45,16,-92, 
  /* [5][0][][] */ 73,-5,6,2,127,20,-8,0, 
  /* [6][0][][] */ -16,88,-18,127,24,56,-71,-54, 
  /* [7][0][][] */ -2,127,-8,4,-4,-14,20,-4, 
  /* [8][0][][] */ 127,59,-2,12,-56,-30,4,-40, 
  /* [9][0][][] */ -127,15,5,16,59,9,-13,2, 
  /* [10][0][][] */ -82,-13,11,127,42,22,-21,-2, 
  /* [11][0][][] */ -127,-3,17,-56,36,10,-25,-40, 
  /* [12][0][][] */ 127,21,6,14,-40,-12,0,-46, 
  /* [13][0][][] */ -11,81,-127,-4,3,105,-75,72, 
  /* [14][0][][] */ -48,-34,-17,127,23,4,-8,-21, 
  /* [15][0][][] */ -2,127,1,-4,1,-13,10,-55, 
  /* [16][0][][] */ -17,-127,-12,8,-7,-101,96,-22, 
  /* [17][0][][] */ 16,127,-1,-12,10,74,-83,-20, 
  /* [18][0][][] */ -4,48,-127,0,1,54,-37,64, 
  /* [19][0][][] */ -81,15,4,9,-127,0,21,28, 
  /* [20][0][][] */ -127,-17,-3,2,71,-34,39,0, 
  /* [21][0][][] */ -68,-9,-6,2,-127,-5,14,2, 
  /* [22][0][][] */ -127,-23,-2,-5,81,-17,39,49, 
  /* [23][0][][] */ -18,-25,-11,-11,-3,85,-127,-90, 
  /* [24][0][][] */ -7,43,-127,0,7,45,-18,75, 
  /* [25][0][][] */ 88,-36,3,127,-79,-11,12,-47, 
  /* [26][0][][] */ 6,-17,0,-1,-14,124,127,-30, 
  /* [27][0][][] */ 81,-5,1,19,127,28,42,-17, 
  /* [28][0][][] */ -1,127,-69,2,8,80,-27,116, 
  /* [29][0][][] */ -7,14,-4,-7,-4,97,-127,-96, 
  /* [30][0][][] */ 6,-9,-3,-127,-5,-1,-4,-13, 
  /* [31][0][][] */ -68,3,6,5,-127,8,13,4, 
  /* [32][0][][] */ -2,39,9,-127,4,47,-88,-123, 
  /* [33][0][][] */ -68,-9,-3,2,-127,38,44,5, 
  /* [34][0][][] */ -127,64,11,18,32,-17,-2,8, 
  /* [35][0][][] */ -20,127,-10,-16,2,-95,80,-24, 
  /* [36][0][][] */ -3,58,1,-25,-5,101,-127,-36, 
  /* [37][0][][] */ 36,-64,-9,29,12,-127,110,-13, 
  /* [38][0][][] */ 16,-127,-1,9,14,46,-43,52, 
  /* [39][0][][] */ 7,-127,-15,-6,-6,-13,-51,-98, 
  /* [40][0][][] */ 122,58,-4,-13,-67,94,-127,-127, 
  /* [41][0][][] */ 12,-127,15,-1,-5,78,-58,122, 
  /* [42][0][][] */ 53,-18,-2,-127,-54,-7,-6,-30, 
  /* [43][0][][] */ -101,-32,12,-127,62,17,-18,-17, 
  /* [44][0][][] */ -1,-30,-2,14,-24,95,127,-6, 
  /* [45][0][][] */ -127,-35,2,2,6,1,16,-13, 
  /* [46][0][][] */ 17,70,127,9,-8,9,20,25, 
  /* [47][0][][] */ -7,10,10,127,14,7,-1,-8, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0001583687262609601, 0.00072643946623429656, 0.00073476246325299144, 0.0010693423682823777, 0.003738900413736701, 0.0011497740633785725, 0.0025487055536359549, 0.0025823446922004223, 0.0014429814182221889, 0.0014877396170049906, 0.0015582242049276829, 0.0013346007326617837, 0.0013803046895191073, 0.0013614521594718099, 0.0013575262855738401, 0.0041772685945034027, 0.00097471551271155477, 0.0010105009423568845, 0.0048087127506732941, 0.00025048234965652227, 0.00075218407437205315, 0.00085880985716357827, 0.0011899061501026154, 0.0022755705285817385, 0.00085542496526613832, 0.00061814696528017521, 0.00040945361251942813, 0.00088021683041006327, 0.0023927337024360895, 0.0023252598475664854, 0.0013245213776826859, 0.00091192330000922084, 0.0022466625086963177, 0.00057466881116852164, 0.00094189494848251343, 0.00055312638869509101, 0.0012550512328743935, 0.00082876067608594894, 0.00024536668206565082, 0.0055447323247790337, 0.0014149199705570936, 0.002325031440705061, 0.0010260718408972025, 0.0010181383695453405, 0.00067808391759172082, 0.0012068540090695024, 0.0021207241807132959, 0.0024065827019512653, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -4143, -25064, 26837, 21426, 3808, 704, 37581, 9307, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0012975319987162948, 0.0006094088894315064, 0.0014402546221390367, 0.0012586212251335382, 0.0011367409024387598, 0.0011336617171764374, 0.00076019088737666607, 0.00074251979822292924, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,0,9,-91,10,24,7,5,3,4,5,-6,95,0,0,5,0,-10,-7,2,76,-3,-1,4,29,35,11,12,4,5,2,-127,11,4,2,2,-26,3,-16,31,9,-28,-7,5,3,-2,5,2, 
  /* [1][0][][] */ -38,-9,-5,-4,45,22,-30,76,23,4,-33,-25,12,0,17,39,0,40,21,-51,2,21,127,20,-26,-2,54,5,20,-4,17,-12,18,-6,-7,-22,5,-57,8,3,-10,-8,-79,-7,-32,6,-49,-102, 
  /* [2][0][][] */ -61,13,-1,13,45,-6,29,24,-8,56,7,-5,-1,0,3,52,0,12,-127,25,-2,13,5,-18,-33,1,35,5,7,32,22,0,4,-5,-10,-15,11,3,5,0,38,-8,-30,-3,23,-59,23,13, 
  /* [3][0][][] */ 3,4,0,11,-5,25,4,-3,66,16,-6,-5,22,0,-27,-5,0,-2,-10,-2,-6,-1,3,-17,-14,-6,-12,-1,-8,0,-3,-10,-51,41,-52,-4,8,3,4,-127,-2,3,1,-49,-2,0,0,3, 
  /* [4][0][][] */ -1,-5,83,33,1,-19,-2,-5,2,-5,-1,-8,-78,0,-13,2,0,9,4,2,67,4,2,-4,-16,29,-5,48,-5,-3,0,100,5,3,-2,0,14,-9,-12,-16,-4,-127,5,3,1,-1,1,2, 
  /* [5][0][][] */ -8,44,2,-10,3,48,24,14,-21,30,7,55,27,0,-127,0,0,14,-36,19,-10,11,-11,42,-19,1,29,-6,-14,22,24,-17,51,28,-38,-6,4,16,-45,16,25,-12,-12,30,20,57,23,22, 
  /* [6][0][][] */ -23,-55,1,5,39,-43,-23,11,25,-23,-13,91,-3,0,-127,40,0,-7,46,-20,-9,3,28,-34,30,1,-2,-13,49,-12,-10,-5,91,-33,26,-4,-1,-13,-68,-21,-13,-14,-6,-26,-23,-86,-17,-29, 
  /* [7][0][][] */ -111,-22,-10,11,127,16,66,26,15,4,27,-36,-31,0,89,103,0,10,1,62,-14,-2,-29,42,14,4,43,8,49,62,54,-10,-12,-17,-18,-26,5,25,24,34,72,1,-25,-13,61,4,63,76, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.055145107209682465, 0.025899877771735191, 0.061210822314023972, 0.053491402417421341, 0.048311486840248108, 0.048180621117353439, 0.03230811282992363, 0.031557090580463409, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 65668, 57737, 62283, 42732, -497, 13898, 2122, 26937, 25834, 26346, 30064, 6678, -46762, -127, 46379, 65, -204, 30005, 1555, 1453, -16245, 7226, 45683, 34196, -19226, 41266, 38255, 21935, -2309, 14795, -7410, -49876, 12761, 106211, 30118, 1776, 55726, -287, 144095, -25855, 14492, -26599, 2616, 98098, -1878, 72082, 1210, -22457, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.1852321929764003e-05, 6.9432331656571478e-05, 0.00015102028555702418, 0.00012530396634247154, 0.00013952814333606511, 0.00015404130681417882, 0.00012973367120139301, 6.1975079006515443e-05, 8.6263193225022405e-05, 3.3096006518462673e-05, 9.8327771411277354e-05, 2.5999872377724387e-05, 0.00017764288350008428, 0.005541567225009203, 5.5870172218419611e-05, 0.00021300980006344616, 0.0027484172023832798, 2.2828888177173212e-05, 9.2592992587015033e-05, 0.00016073809820227325, 0.00012158970639575273, 0.00016986738773994148, 0.00012818365939892828, 3.7837806303286925e-05, 8.4381572378333658e-05, 6.4852269133552909e-05, 3.687296702992171e-05, 4.6598845074186102e-05, 0.00028777256375178695, 5.6188160669989884e-05, 4.8494894144823775e-05, 0.00018681163783185184, 0.00019129988504573703, 1.0012600796471816e-05, 8.1874815805349499e-05, 0.00016891288396436721, 1.6525149476365186e-05, 0.00045016396325081587, 3.1828018109081313e-05, 9.0032990556210279e-05, 6.8128130806144327e-05, 0.00018898086273111403, 9.9626275186892599e-05, 1.0796860806294717e-05, 0.00014183073653839529, 8.2636943261604756e-05, 0.00020664514158852398, 0.00013914961891714483, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-7,-17,8,-40,-79,-68,-26,-51,8,67,34,-71,114,-42,-113,-83,36,-6,-1,-71,-111,-79,-35,-125,-63,-21,70,15,94,26,-127,-89,-6,54,18,48,-127,79,-76,-14,106,-109,-2,-35,-87,107, 75,12,-27,-29,57,-127,-127,-81,60,-76,-116,110,38,-82,-1,62,-52,-112,59,6,10,-112,-127,-69,-5,-127,-120,-40,-54,21,-56,54,29,-127,64,84,13,73,-91,127,-127,6,127,-127,2,-23,-127,95, -32,43,6,-5,-64,-109,-58,-17,87,-8,-127,39,9,-71,-101,-10,-127,-24,27,12,-15,-76,-35,-24,-11,-29,-57,-12,-10,18,-24,9,108,-87,71,32,14,36,-4,16,-78,3,6,-80,-16,5,-55,15, 
  /* [0][1][][] */ -86,-127,-45,-44,-9,54,98,-105,-26,-109,-21,112,90,-64,27,-96,-121,-93,89,-77,42,-89,-102,-127,42,-120,-77,-39,127,-60,127,84,-43,-86,-14,83,-35,-76,-108,90,42,59,105,-109,-91,-118,81,119, 127,-83,-127,-127,127,41,94,-127,100,-127,-112,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-119,127,-100,-127,-127,-121,-127,-71,127,29,-111,127,127,-68,-127,-97,90,61,127,127,-117,-112,-127,125,127, -53,31,-62,-84,-118,-23,31,-37,127,-20,-77,35,56,-70,-26,-43,-37,-30,54,-70,57,-82,-38,-23,48,-5,-45,-61,15,-89,-35,20,30,-99,117,22,-36,-62,2,-14,37,53,10,-75,-57,-36,65,36, 
  /* [0][2][][] */ -61,-108,-34,-34,1,34,-5,-33,-38,-59,-16,59,77,-127,-127,-63,-43,-18,63,75,52,-32,-12,-59,33,-55,-11,-59,76,28,77,62,109,-27,-37,-9,-95,35,-17,31,9,37,15,-56,96,-78,4,31, 87,-74,-87,-86,81,19,7,-46,47,-70,-32,57,83,-26,16,93,-24,-30,78,117,81,-52,-18,-57,94,-68,-18,-99,-51,39,-45,111,-18,-48,67,6,-127,50,-14,-1,11,32,15,-67,127,-100,-12,40, -28,30,-42,-36,-79,-19,22,-10,59,-4,-13,33,31,-43,111,-28,-93,-4,30,59,75,-28,-1,-3,43,2,-3,-64,-13,28,-20,39,-90,-43,64,3,-20,21,28,-39,7,35,-7,-15,63,-35,-4,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039037235546857119, 0.0029508739244192839, 0.0064183622598648071, 0.0053254184313118458, 0.0059299459680914879, 0.0065467553213238716, 0.0055136806331574917, 0.0026339408941566944, 0.0036661855410784483, 0.0014065803261473775, 0.0041789300739765167, 0.0011049945605918765, 0.0075498223304748535, 0.23551659286022186, 0.0023744823411107063, 0.0090529164299368858, 0.1168077290058136, 0.00097022776026278734, 0.0039352020248770714, 0.0068313688971102238, 0.0051675625145435333, 0.0072193639352917671, 0.005447805393487215, 0.0016081067733466625, 0.0035862168297171593, 0.0027562214527279139, 0.0015671011060476303, 0.0019804509356617928, 0.012230333872139454, 0.0023879967629909515, 0.0020610329229384661, 0.007939494214951992, 0.0081302449107170105, 0.00042553551611490548, 0.0034796795807778835, 0.0071787973865866661, 0.00070231885183602571, 0.019131967797875404, 0.0013526907423511147, 0.0038264018949121237, 0.0028954455628991127, 0.0080316867679357529, 0.0042341165244579315, 0.00045886659063398838, 0.0060278060846030712, 0.0035120700486004353, 0.0087824184447526932, 0.0059138587675988674, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4537, 119, 9632, 7091, 7113, 6783, 11729, -32, -1, -344, 2484, 489, 13082, -86706784, 2964, 19320, -69994216, -120, -511, 13033, 4151, -21, -6, 448, 3755, -907, 67, 664, 3733, 1817, 2612, 14441, 3821, 356, 267, -2208, 432, 3570, -166, 14171, 2326, 12479, -393, -96, 14882, 221, 11540, 4351, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00046079041203483939, 0.00039619393646717072, 0.00032967893639579415, 0.00026695732958614826, 0.00028007134096696973, 0.00030653539579361677, 0.00032683188328519464, 0.0012821772834286094, 0.00039896785165183246, 0.0021870301570743322, 0.0005965998861938715, 0.0017920761601999402, 0.00016967018018476665, 1.8704839899186254e-09, 0.00088613235857337713, 0.00016997956845443696, 1.8704839899186254e-09, 0.0061718672513961792, 0.00038329249946400523, 0.00029696151614189148, 0.00026465239352546632, 0.0044813761487603188, 0.000324830791214481, 0.0014273108681663871, 0.0010125816334038973, 0.00061757536605000496, 0.0022824020124971867, 0.0019063863437622786, 0.000300564308417961, 0.0016135659534484148, 0.0011316559975966811, 0.00016070737910922617, 0.00019913868163712323, 0.009066297672688961, 0.00043897182331420481, 0.00054265744984149933, 0.0035704642068594694, 0.00035753933480009437, 0.0023693435359746218, 0.00024385274446103722, 0.0012197378091514111, 0.00017618156562093645, 0.00040340182022191584, 0.0087061282247304916, 0.00033865397563204169, 0.00048972858348861337, 0.00024409058096352965, 0.00020245803170837462, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,54,-46,29,-14,-54,19, 
  /* [1][0][][] */ 71,71,-23,-104,19,-16,-86,127, 
  /* [2][0][][] */ 29,3,-47,118,51,127,47,86, 
  /* [3][0][][] */ 84,72,-82,127,-94,-8,-7,18, 
  /* [4][0][][] */ -40,-95,69,9,8,31,-40,-127, 
  /* [5][0][][] */ 21,8,-34,39,3,-30,35,127, 
  /* [6][0][][] */ 59,-20,-127,-82,108,16,51,-34, 
  /* [7][0][][] */ 127,18,20,-25,31,-5,87,-61, 
  /* [8][0][][] */ 12,-93,12,96,10,23,-10,-127, 
  /* [9][0][][] */ 104,-126,13,-4,-15,11,-127,84, 
  /* [10][0][][] */ -127,-39,-119,26,-13,1,-114,59, 
  /* [11][0][][] */ -23,-43,-10,-104,-127,-29,48,-18, 
  /* [12][0][][] */ 16,6,-41,70,-78,-22,59,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -5,-31,-5,8,46,127,43,46, 
  /* [15][0][][] */ 35,6,19,-127,61,35,-51,68, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 12,19,127,20,-29,-9,33,30, 
  /* [18][0][][] */ 91,-127,22,37,-8,15,-115,9, 
  /* [19][0][][] */ -127,-14,35,72,-61,-57,-100,69, 
  /* [20][0][][] */ 28,33,-37,107,-18,-127,-9,57, 
  /* [21][0][][] */ 57,24,127,9,-15,-10,67,12, 
  /* [22][0][][] */ -80,-15,-127,-1,2,7,-97,6, 
  /* [23][0][][] */ -100,127,-22,-19,9,-10,120,-76, 
  /* [24][0][][] */ 8,-50,-50,88,-12,-62,99,127, 
  /* [25][0][][] */ 8,45,36,38,124,127,-75,-57, 
  /* [26][0][][] */ -81,-27,-127,-4,6,11,-89,2, 
  /* [27][0][][] */ 0,-26,-33,11,-43,127,57,41, 
  /* [28][0][][] */ 5,-14,-15,34,19,127,44,52, 
  /* [29][0][][] */ 93,30,127,4,-24,-16,92,-3, 
  /* [30][0][][] */ -83,127,-22,-23,8,-4,98,-52, 
  /* [31][0][][] */ -48,-95,-19,7,32,-77,127,113, 
  /* [32][0][][] */ 12,7,-49,113,-13,106,84,127, 
  /* [33][0][][] */ 0,63,-11,-110,10,-11,-11,127, 
  /* [34][0][][] */ -22,92,-3,-105,27,-14,21,127, 
  /* [35][0][][] */ 127,7,-13,-38,18,30,106,-38, 
  /* [36][0][][] */ -127,-2,31,66,-40,11,-120,85, 
  /* [37][0][][] */ -11,-20,-9,28,24,127,48,53, 
  /* [38][0][][] */ 16,23,5,84,127,-5,-18,39, 
  /* [39][0][][] */ 5,29,35,-127,23,1,-36,122, 
  /* [40][0][][] */ 103,26,127,6,-14,-7,97,-2, 
  /* [41][0][][] */ 1,-33,-36,86,58,127,77,104, 
  /* [42][0][][] */ -86,-3,127,19,-43,17,-22,65, 
  /* [43][0][][] */ -15,-51,9,91,-16,8,15,-127, 
  /* [44][0][][] */ 37,-9,-70,-127,72,-32,-9,-117, 
  /* [45][0][][] */ -85,127,0,-51,12,4,77,-53, 
  /* [46][0][][] */ -127,-25,37,31,-27,38,-99,47, 
  /* [47][0][][] */ 100,21,119,-7,28,-20,127,-19, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0009698749054223299, 0.00083391182124614716, 0.00069391058059409261, 0.00056189368478953838, 0.00058949610684067011, 0.00064519786974415183, 0.00068791804369539022, 0.0026987357996404171, 0.0008397503406740725, 0.0046032764948904514, 0.001255727605894208, 0.0037719744723290205, 0.00035712300450541079, 3.937008052901092e-09, 0.0018651376012712717, 0.00035777420271188021, 3.937008052901092e-09, 0.012990590184926987, 0.00080675678327679634, 0.00062504666857421398, 0.00055704225087538362, 0.0094324322417378426, 0.00068370613735169172, 0.0030042140278965235, 0.0021312888711690903, 0.0012998769525438547, 0.0048040160909295082, 0.0040125753730535507, 0.00063262984622269869, 0.003396244952455163, 0.002381917554885149, 0.00033825801801867783, 0.00041914850589819252, 0.019082807004451752, 0.00092395098181441426, 0.0011421892559155822, 0.0075151384808123112, 0.00075255130650475621, 0.0049870111979544163, 0.00051326298853382468, 0.0025673126801848412, 0.00037082820199429989, 0.00084908300777897239, 0.018324719741940498, 0.00071280129486694932, 0.001030784216709435, 0.0005137635744176805, 0.00042613508412614465, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -173, -42972, -8125, -13253, -31744, -1387, -25328, -25553, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0022087288089096546, 0.0021576029248535633, 0.0025055352598428726, 0.0010856336448341608, 0.0012125888606533408, 0.0020823902450501919, 0.0014868172584101558, 0.0010055361781269312, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,0,-2,123,0,-2,0,0,-127,-90,-5,0,119,-3,0, 
  /* [1][0][][] */ 0,-29,-2,88,72,14,22,6,-1,-7,127,-44,0,30,-12,0, 
  /* [2][0][][] */ 0,1,0,-12,-59,3,9,2,0,2,-15,2,0,127,-5,0, 
  /* [3][0][][] */ 0,-12,-21,-127,84,25,71,18,1,62,-3,41,0,-1,20,0, 
  /* [4][0][][] */ 0,47,-24,38,-54,29,127,8,0,-60,16,-7,0,-6,16,0, 
  /* [5][0][][] */ 0,-15,-11,0,-23,-24,-14,16,0,8,-4,-43,0,-6,127,0, 
  /* [6][0][][] */ 0,17,-2,-1,49,-20,-26,-4,-1,-112,118,59,0,127,63,0, 
  /* [7][0][][] */ 0,12,-19,127,10,-2,13,10,0,68,-55,75,0,-7,46,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.093870967626571655, 0.091698125004768372, 0.10648524761199951, 0.0461394302546978, 0.051535025238990784, 0.088501587510108948, 0.063189730048179626, 0.042735286056995392, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 26571, 88775, 13083, 12428, 79243, 14585, 57448, -12250, 6976, 29778, 13933, -445, 26404, 13627, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 9.860425052465871e-05, 4.5367094571702182e-05, 0.00026479369262233377, 0.0001484263630118221, 4.1854236769722775e-05, 0.00035535547067411244, 6.7852721258532256e-05, 1.969792356248945e-05, 0.00026424866518937051, 0.00019734515808522701, 0.0007279493729583919, 0.00072724185883998871, 0.00024607020895928144, 0.00015601678751409054, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,39,-67,80,-76,-89,-3,-8,30,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,91,-2,-72,67,-95,78,-95,-27,4,-15,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,16,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-41,-57,-14,-8,-26,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,39,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0041906805709004402, 0.0019281014101579785, 0.011253731325268745, 0.006308120209723711, 0.0017788050463423133, 0.015102607198059559, 0.0028837407007813454, 0.00083716172957792878, 0.011230567470192909, 0.0083871688693761826, 0.030937846750020981, 0.030907778069376945, 0.010457984171807766, 0.0066307135857641697, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 15294, -96557, 14945, 221321, 25288, 22379, 10756, -194935, 27240, 29356, 473503, -1073741824, 49196, 48195, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00020055535424035043, 0.00019362015882506967, 4.3212148739257827e-05, 1.3820764252159279e-05, 0.00020815506286453456, 0.00014867965364828706, 0.0003120285109616816, 5.9164317463000771e-06, 5.7048644521273673e-05, 0.00010101377120008692, 1.2348212294455152e-05, 1.1533876076441629e-09, 7.7426928328350186e-05, 5.9865647926926613e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 49,-6,27, -4,-26,11, -127,-125,-72, 
  /* [1][1][][] */ 6,-5,-4, -18,3,-9, 5,-31,1, 
  /* [1][2][][] */ 2,20,-2, 0,8,-7, 44,-18,8, 
  /* [2][0][][] */ 29,-4,-3, 69,110,2, 42,-32,13, 
  /* [2][1][][] */ 14,17,5, 67,127,-21, 24,1,0, 
  /* [2][2][][] */ 54,-57,27, 77,-35,-13, 37,-47,21, 
  /* [3][0][][] */ 6,32,4, 32,95,23, 4,10,-1, 
  /* [3][1][][] */ 20,37,8, 65,127,28, -10,-14,7, 
  /* [3][2][][] */ 9,8,9, 28,30,12, -1,-2,4, 
  /* [4][0][][] */ 34,68,-13, 12,78,-14, -16,9,-6, 
  /* [4][1][][] */ 37,81,47, 29,120,32, 28,50,-18, 
  /* [4][2][][] */ 52,82,45, 48,127,23, -18,28,24, 
  /* [5][0][][] */ 7,2,-119, -6,-1,-106, -9,26,-28, 
  /* [5][1][][] */ 3,-43,-127, -4,-49,-120, -5,9,-25, 
  /* [5][2][][] */ -4,7,-18, -1,-7,-15, -1,10,-13, 
  /* [6][0][][] */ 25,-64,34, 47,-87,40, 8,-21,8, 
  /* [6][1][][] */ 36,-96,61, 64,-127,72, 8,-28,17, 
  /* [6][2][][] */ 21,-35,13, 16,-43,26, -11,9,0, 
  /* [7][0][][] */ -35,13,8, -110,-39,5, -26,24,5, 
  /* [7][1][][] */ -12,-8,4, -127,-93,-4, -9,-6,7, 
  /* [7][2][][] */ -25,29,-7, -16,9,1, -27,23,-2, 
  /* [8][0][][] */ 121,123,57, 114,119,58, 121,127,73, 
  /* [8][1][][] */ 123,123,58, 115,118,59, 120,123,69, 
  /* [8][2][][] */ 125,125,61, 119,121,63, 122,124,71, 
  /* [9][0][][] */ -23,-5,8, -14,-9,-3, 6,5,-9, 
  /* [9][1][][] */ 98,115,-8, 74,127,15, -7,21,28, 
  /* [9][2][][] */ -27,-24,18, 3,-30,3, 7,1,-23, 
  /* [10][0][][] */ -25,-83,-18, 34,95,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-102,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,8, 
  /* [11][0][][] */ -9,-21,5, 15,-36,11, 14,-94,-46, 
  /* [11][1][][] */ -47,-43,-18, -37,-63,-36, -14,-57,-51, 
  /* [11][2][][] */ -4,-35,-74, 118,127,65, -35,16,-43, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-111,-25, -9,-17,-5, 
  /* [13][1][][] */ 61,114,15, 57,127,25, 7,16,11, 
  /* [13][2][][] */ -9,-19,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 44,-8,-40, 77,-29,-53, 30,-11,-22, 
  /* [14][1][][] */ 89,-18,-76, 127,-42,-91, 58,-20,-39, 
  /* [14][2][][] */ 55,-9,-47, 75,-21,-54, 25,-7,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.051141612231731415, 0.049373138695955276, 0.01101909764111042, 0.003524294588714838, 0.05307953804731369, 0.037913311272859573, 0.079567268490791321, 0.0015086899511516094, 0.014547403901815414, 0.025758510455489159, 0.0031487939413636923, 2.9411381774480105e-07, 0.019743865355849266, 0.015265739522874355, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.47510293126106262, } };
const TfArray<1, int> quant46_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.39784428477287292, } };
const TfArray<1, int> quant50_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.47004178166389465, } };
const TfArray<1, int> quant53_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.47785922884941101, } };
const TfArray<1, int> quant54_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.2577742338180542, } };
const TfArray<1, int> quant58_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.19224520027637482, } };
const TfArray<1, int> quant61_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.28069645166397095, } };
const TfArray<1, int> quant62_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.17625504732131958, } };
const TfArray<1, int> quant65_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.32542732357978821, } };
const TfArray<1, int> quant66_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.034150663763284683, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.053897310048341751, } };
const TfArray<1, int> quant69_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
